{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/post-link.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["Layout","page","children","title","className","PostLink","post","frontmatter","path","date","description","published","readingTime","fields","since","seconds","Math","floor","Date","interval","timeSince","to","role","aria-label","text","IndexPage","Posts","data","allMdx","edges","filter","edge","node","latestPost","shift","OtherPosts","map","key","id","pageQuery","SEO","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"oHAAA,2DA4BeA,IArBA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAClBC,EACO,kBAATF,EACI,4DACA,GAEN,OACE,oCACE,kBAAC,IAAD,CAAQE,MAAOA,IACf,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,IAAIF,IAErB,kBAAC,IAAD,S,uRCnBN,qCA8DeG,IA3DE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAIzBA,EAFFC,YAAeC,EAFY,EAEZA,KAAML,EAFM,EAENA,MAAOM,EAFD,EAECA,KAAMC,EAFP,EAEOA,YAAaC,EAFpB,EAEoBA,UACrCC,EACRN,EADFO,OAAUD,YAaNE,EAVY,SAACL,GACjB,IAAIM,EAAUC,KAAKC,OAAO,IAAIC,KAAST,GAAQ,KAC3CU,EAAWH,KAAKC,MAAMF,EAAU,SAGpC,IADAI,EAAWH,KAAKC,MAAMF,EAAU,SAChB,EACd,OAAOI,EAIGC,CAAU,IAAIF,KAAKT,IAEjC,OACE,yBAAKL,UAAU,QACb,kBAAC,OAAD,CAAMA,UAAU,YAAYiB,GAAIb,GAC9B,yBAAKJ,UAAU,6DACZD,GAEH,yBAAKC,UAAU,iFACZM,GAEH,yBAAKN,UAAU,sDAAf,YACYK,EADZ,KACyB,IACvB,8BACE,0BAAML,UAAU,OAAOkB,KAAK,MAAMC,aAAW,aAA7C,KAGCX,EAAYY,MACP,IACPb,GAAaG,EAAQ,GACpB,0BAAMV,UAAU,0BAAhB,KAEE,0BAAMA,UAAU,2DAAhB,QAKF,IAEAO,GACA,0BAAMP,UAAU,0BAAhB,KAEE,0BAAMA,UAAU,2DAAhB,e,kCCnDd,8GAqCeqB,UA7BG,SAAC,GAIZ,IACDC,EADA,EAHJC,KACEC,OAAUC,MAGMC,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAKzB,YAAYI,aAErDsB,EAAaP,EAAM,GAEvBA,EAAMQ,QACN,IAAMC,EAAaT,EAAMU,KAAI,SAACL,GAAD,OAC3B,kBAAC,IAAD,CAAUM,IAAKN,EAAKC,KAAKM,GAAIhC,KAAMyB,EAAKC,UAG1C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK7B,MAAM,UACX,yBAAKC,UAAU,qDAAf,eAGA,kBAAC,IAAD,CAAUiC,IAAKJ,EAAWD,KAAKM,GAAIhC,KAAM2B,EAAWD,OACpD,yBAAK5B,UAAU,gDAAf,eAGA,yBAAKA,UAAU,eAAe+B,KAO7B,IAAMI,EAAS,c,mFC3BtB,SAASC,EAAT,GAAkD,IAAnC9B,EAAkC,EAAlCA,YAAa+B,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMvC,EAAS,EAATA,MAC9BwC,EADuC,OACvCA,KAcFC,EAAkBlC,GAAeiC,EAAKE,aAAanC,YAEzD,OACE,kBAAC,IAAD,CACEoC,eAAgB,CACdL,QAEFtC,MAAOA,EACP4C,cAAa,QAAUJ,EAAKE,aAAa1C,MACzCuC,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAAS9C,GAEX,CACE+C,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAAS9C,GAEX,CACE6C,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfF,EAAIa,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNhC,YAAY,IAUC8B","file":"component---src-pages-index-js-b70002d22aa9e779831d.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './header';\nimport Footer from './footer';\nimport './layout.css';\n\nconst Layout = ({ page, children }) => {\n  let title =\n    page === 'digitalgarden'\n      ? \"A collection of notes, draft blogs I'm currently writing.\"\n      : '';\n\n  return (\n    <>\n      <Header title={title} />\n      <section className=\"w-3/4 m-auto\">\n        <div className=\"\">{children}</div>\n      </section>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({ post }) => {\n  const {\n    frontmatter: { path, title, date, description, published },\n    fields: { readingTime },\n  } = post;\n\n  const timeSince = (date) => {\n    var seconds = Math.floor((new Date() - date) / 1000);\n    var interval = Math.floor(seconds / 31536000);\n\n    interval = Math.floor(seconds / 86400);\n    if (interval >= 0) {\n      return interval;\n    }\n  };\n\n  const since = timeSince(new Date(date));\n\n  return (\n    <div className=\"post\">\n      <Link className=\"text-base\" to={path}>\n        <div className=\"text-2xl text-blog-primary transition-colors duration-500\">\n          {title}\n        </div>\n        <div className=\"text-blog-secondary text-base font-normal mt-3 transition-colors duration-500\">\n          {description}\n        </div>\n        <div className=\"text-blog-lightgray text-base font-light mt-3 mb-5\">\n          wrote on {date} &#183;{' '}\n          <span>\n            <span className=\"mr-2\" role=\"img\" aria-label=\"hourglass\">\n              ‚è≥\n            </span>\n            {readingTime.text}\n          </span>{' '}\n          {published && since < 35 ? (\n            <span className=\"hidden sm:inline-block\">\n              &#183;&nbsp;\n              <span className=\"new not-italic bg-blog-header px-2 rounded inline-block\">\n                New\n              </span>\n            </span>\n          ) : (\n            ''\n          )}\n          {!published && (\n            <span className=\"hidden sm:inline-block\">\n              &#183;&nbsp;\n              <span className=\"new not-italic bg-blog-header px-2 rounded inline-block\">\n                Draft\n              </span>\n            </span>\n          )}\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostLink;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\n//* Components\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport PostLink from '../components/post-link';\n\nconst IndexPage = ({\n  data: {\n    allMdx: { edges },\n  },\n}) => {\n  let Posts = edges.filter((edge) => edge.node.frontmatter.published);\n\n  let latestPost = Posts[0];\n  //*\n  Posts.shift();\n  const OtherPosts = Posts.map((edge) => (\n    <PostLink key={edge.node.id} post={edge.node} />\n  ));\n\n  return (\n    <Layout>\n      <SEO title=\"Hi üëã\" />\n      <div className=\"text-4xl font-light text-blog-lightgray mt-6 mb-4\">\n        Latest post\n      </div>\n      <PostLink key={latestPost.node.id} post={latestPost.node} />\n      <div className=\"text-4xl font-light text-blog-lightgray mb-4\">\n        Other posts\n      </div>\n      <div className=\"posts mb-20\">{OtherPosts}</div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            title\n            description\n            published\n            tags\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}