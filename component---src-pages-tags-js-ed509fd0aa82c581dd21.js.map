{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/post-link.js","webpack:///./src/pages/tags.js","webpack:///./src/components/seo.js"],"names":["Layout","children","className","PostLink","post","frontmatter","path","title","date","description","readingTime","fields","since","seconds","Math","floor","Date","interval","timeSince","to","text","Tags","sorted","data","allMdx","group","sort","a","b","totalCount","map","fieldValue","content","nodes","length","section","posts","node","key","id","pageQuery","SEO","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","property","author","concat","defaultProps"],"mappings":"oHAAA,2DAuBeA,IAhBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,oCACE,kBAAC,IAAD,MACA,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,IAAID,IAErB,kBAAC,IAAD,S,uRCdN,qCAkDeE,IA/CE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAIzBA,EAFFC,YAAeC,EAFY,EAEZA,KAAMC,EAFM,EAENA,MAAOC,EAFD,EAECA,KAAMC,EAFP,EAEOA,YACxBC,EACRN,EADFO,OAAUD,YAaNE,EAVY,SAAAJ,GAChB,IAAIK,EAAUC,KAAKC,OAAO,IAAIC,KAASR,GAAQ,KAC3CS,EAAWH,KAAKC,MAAMF,EAAU,SAGpC,IADAI,EAAWH,KAAKC,MAAMF,EAAU,SAChB,EACd,OAAOI,EAIGC,CAAU,IAAIF,KAAKR,IAEjC,OACE,yBAAKN,UAAU,QACb,kBAAC,OAAD,CAAMA,UAAU,YAAYiB,GAAIb,GAC9B,yBAAKJ,UAAU,6DACZK,GAEH,yBAAKL,UAAU,iFACZO,GAEH,yBAAKP,UAAU,6DAAf,YACYM,EADZ,MACyB,8BAAOE,EAAYU,MAAa,IACtDR,EAAQ,GACP,0BAAMV,UAAU,0BAAhB,KAEE,0BACEA,UAAU,sEADZ,QAOF,Q,o9BCOGmB,UAzCF,SAAC,GAAc,IACpBC,EAAS,EADU,EAAXC,KACUC,OAAOC,OAC5BC,MAAK,SAACC,EAAGC,GACR,OAAID,EAAEE,YAAcD,EAAEC,WACb,GAGD,KAETC,KAAI,SAAA1B,GAAI,MAAK,CACZG,MAAOH,EAAK2B,WACZC,QAAS5B,EAAK6B,MACdC,OAAQ9B,EAAK6B,MAAMC,WAGvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK3B,MAAM,UACX,yBAAKL,UAAU,qDAAf,QAICoB,EAAOQ,KAAI,SAAAK,GAAY,IACd5B,EAA2B4B,EAA3B5B,MAAOyB,EAAoBG,EAApBH,QAASE,EAAWC,EAAXD,OAClBE,EAAQJ,EAAQF,KAAI,SAAAO,GAAI,OAC5B,kBAAC,IAAD,CAAUC,IAAKD,EAAKE,GAAInC,KAAMiC,OAEhC,OACE,oCACE,yBAAKnC,UAAU,qCACb,yBAAKA,UAAU,gDAAgDK,GAC/D,yBAAKL,UAAU,iDAAiDgC,EAAS,EAAOA,EAAhB,SAAoCA,EAApC,UAElE,yBAAKhC,UAAU,eAAekC,SAUnC,IAAMI,EAAS,c,4FCvCtB,SAASC,EAAT,GAAkD,IAAnChC,EAAkC,EAAlCA,YAAaiC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMpC,EAAS,EAATA,MAC9BqC,EADuC,OACvCA,KAcFC,EAAkBpC,GAAemC,EAAKE,aAAarC,YAEzD,OACE,kBAAC,IAAD,CACEsC,eAAgB,CACdL,QAEFnC,MAAOA,EACPyC,cAAa,QAAUJ,EAAKE,aAAavC,MACzCoC,KAAM,CACJ,CACEM,KAAK,cACLjB,QAASa,GAEX,CACEK,SAAS,WACTlB,QAASzB,GAEX,CACE2C,SAAS,iBACTlB,QAASa,GAEX,CACEK,SAAS,UACTlB,QAAQ,WAEV,CACEiB,KAAK,eACLjB,QAAQ,WAEV,CACEiB,KAAK,kBACLjB,QAASY,EAAKE,aAAaK,QAE7B,CACEF,KAAK,gBACLjB,QAASzB,GAEX,CACE0C,KAAK,sBACLjB,QAASa,IAEXO,OAAOT,KAKfF,EAAIY,aAAe,CACjBX,KAAK,KACLC,KAAM,GACNlC,YAAY,IAUCgC","file":"component---src-pages-tags-js-ed509fd0aa82c581dd21.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './header';\nimport Footer from './footer';\nimport './layout.css';\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <section className=\"w-3/4 m-auto\">\n        <div className=\"\">{children}</div>\n      </section>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({ post }) => {\n  const {\n    frontmatter: { path, title, date, description },\n    fields: { readingTime },\n  } = post;\n\n  const timeSince = date => {\n    var seconds = Math.floor((new Date() - date) / 1000);\n    var interval = Math.floor(seconds / 31536000);\n\n    interval = Math.floor(seconds / 86400);\n    if (interval >= 0) {\n      return interval;\n    }\n  };\n\n  const since = timeSince(new Date(date));\n\n  return (\n    <div className=\"post\">\n      <Link className=\"text-base\" to={path}>\n        <div className=\"text-2xl text-blog-primary transition-colors duration-500\">\n          {title}\n        </div>\n        <div className=\"text-blog-secondary text-base font-normal mt-3 transition-colors duration-500\">\n          {description}\n        </div>\n        <div className=\"text-blog-lightgray text-base font-light mt-3 mb-5 italic\">\n          wrote on {date} &#183; <span>{readingTime.text}</span>{' '}\n          {since < 35 ? (\n            <span className=\"hidden sm:inline-block\">\n              &#183;&nbsp;\n              <span\n                className=\"new not-italic bg-blog-header px-2 rounded opacity-50 inline-block\"\n              >\n                New\n              </span>\n            </span>\n          ) : (\n            ''\n          )}\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostLink;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\n//* Components\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport PostLink from '../components/post-link';\n\nconst Tags = ({ data }) => {\n  const sorted = [...data.allMdx.group]\n    .sort((a, b) => {\n      if (a.totalCount <= b.totalCount) {\n        return 1;\n      }\n\n      return -1;\n    })\n    .map(post => ({\n      title: post.fieldValue,\n      content: post.nodes,\n      length: post.nodes.length\n    }));\n\n  return (\n    <Layout>\n      <SEO title=\"Hi ðŸ‘‹\" />\n      <div className=\"text-4xl font-light text-blog-darkgray mt-6 mb-10\">\n        Tags\n      </div>\n\n      {sorted.map(section => {\n        const { title, content, length } = section;\n        const posts = content.map(node => (\n          <PostLink key={node.id} post={node} />\n        ));\n        return (\n          <>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-2xl font-light text-blog-lightgray mb-4\">{title}</div>\n              <div className=\"text-base font-light text-blog-lightgray mb-4\">{length > 1 ? `${length} posts` : `${length} post`}</div>\n            </div>\n            <div className=\"posts mb-10\">{posts}</div>\n          </>\n        );\n      })}\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query getGroupedTagsQuery {\n    allMdx(filter: { frontmatter: { published: { eq: true } } }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        nodes {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            title\n            description\n            published\n            tags\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}