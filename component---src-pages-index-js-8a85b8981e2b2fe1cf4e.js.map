{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/post-link.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["Layout","children","className","PostLink","post","to","frontmatter","path","title","description","date","pageQuery","IndexPage","Posts","data","allMarkdownRemark","edges","filter","edge","node","latestPost","shift","OtherPosts","map","key","id","SEO","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"2FAAA,2DAuBeA,IAhBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,oCACE,kBAAC,IAAD,MACA,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,IAAID,IAErB,kBAAC,IAAD,S,oWCDSE,EAVE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,yBAAKF,UAAU,QACb,kBAAC,OAAD,CAAMG,GAAID,EAAKE,YAAYC,MACzB,yBAAKL,UAAU,6DAA6DE,EAAKE,YAAYE,OAC7F,yBAAKN,UAAU,kDAAkDE,EAAKE,YAAYG,aAClF,yBAAKP,UAAU,6DAAf,YAAqFE,EAAKE,YAAYI,S,wBCyB/FC,GAFEC,UAvBG,SAAC,GAIb,IACAC,EADD,EAHHC,KACEC,kBAAqBC,MAGLC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKb,YAAYI,QAErDU,EAAaP,EAAM,GAEvBA,EAAMQ,QACN,IAAMC,EAAaT,EAAMU,KAAI,SAAAL,GAAI,OAAI,kBAAC,EAAD,CAAUM,IAAKN,EAAKC,KAAKM,GAAIrB,KAAMc,EAAKC,UAE7E,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKX,MAAM,UACX,yBAAKN,UAAU,qDAAf,eACA,kBAAC,EAAD,CAAUsB,IAAKJ,EAAWD,KAAKM,GAAIrB,KAAMgB,EAAWD,OACpD,yBAAKjB,UAAU,gDAAf,eACA,yBAAKA,UAAU,eAAeoB,KAOd,e,4FCrBtB,SAASI,EAAT,GAAkD,IAAnCjB,EAAkC,EAAlCA,YAAakB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMpB,EAAS,EAATA,MAC9BqB,EADuC,OACvCA,KAcFC,EAAkBrB,GAAeoB,EAAKE,aAAatB,YAEzD,OACE,kBAAC,IAAD,CACEuB,eAAgB,CACdL,QAEFnB,MAAOA,EACPyB,cAAa,QAAUJ,EAAKE,aAAavB,MACzCoB,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAAS3B,GAEX,CACE4B,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAAS3B,GAEX,CACE0B,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfF,EAAIa,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNnB,YAAY,IAUCiB","file":"component---src-pages-index-js-8a85b8981e2b2fe1cf4e.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './header';\nimport Footer from './footer';\nimport './layout.css';\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <section className=\"w-3/4 m-auto\">\n        <div className=\"\">{children}</div>\n      </section>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst PostLink = ({ post }) => (\n  <div className=\"post\">\n    <Link to={post.frontmatter.path}>\n      <div className=\"text-2xl text-blog-primary transition-colors duration-500\">{post.frontmatter.title}</div>\n      <div className=\"text-blog-secondary text-base font-normal mt-3\">{post.frontmatter.description}</div>\n      <div className=\"text-blog-lightgray text-base font-light mt-3 mb-5 italic\">wrote on {post.frontmatter.date}</div>\n    </Link>\n  </div>\n)\n\nexport default PostLink\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\n\n//* Components\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) =>{\n  let Posts = edges.filter(edge => !!edge.node.frontmatter.date);\n  \n  let latestPost = Posts[0];\n  //*\n  Posts.shift();\n  const OtherPosts = Posts.map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return (\n    <Layout>\n      <SEO title=\"Hi ðŸ‘‹\" />\n      <div className=\"text-4xl font-light text-blog-lightgray mt-6 mb-4\">Latest post</div>\n      <PostLink key={latestPost.node.id} post={latestPost.node} />\n      <div className=\"text-4xl font-light text-blog-lightgray mb-4\">Other posts</div>\n      <div className=\"posts mb-20\">{OtherPosts}</div>\n    </Layout>\n  )\n} \n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}