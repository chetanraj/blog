{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/post-link.js","webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["Layout","children","className","PostLink","post","frontmatter","path","title","date","description","readingTime","fields","since","seconds","Math","floor","Date","interval","timeSince","to","text","pageQuery","IndexPage","Posts","data","allMarkdownRemark","edges","filter","edge","node","published","latestPost","shift","OtherPosts","map","key","id","SEO","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"2FAAA,2DAuBeA,IAhBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,oCACE,kBAAC,IAAD,MACA,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,IAAID,IAErB,kBAAC,IAAD,S,2WCwBSE,EAnCE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAIzBA,EAFFC,YAAeC,EAFY,EAEZA,KAAMC,EAFM,EAENA,MAAOC,EAFD,EAECA,KAAMC,EAFP,EAEOA,YACxBC,EACRN,EADFO,OAAUD,YAaNE,EAVY,SAACJ,GACjB,IAAIK,EAAUC,KAAKC,OAAO,IAAIC,KAASR,GAAQ,KAC3CS,EAAWH,KAAKC,MAAMF,EAAU,SAGpC,IADAI,EAAWH,KAAKC,MAAMF,EAAU,QACjB,EACb,OAAOI,EAIGC,CAAU,IAAIF,KAAKR,IAEjC,OACE,yBAAKN,UAAU,QACb,kBAAC,OAAD,CAAMiB,GAAIb,GACR,yBAAKJ,UAAU,6DACZK,GAEH,yBAAKL,UAAU,kDACZO,GAEH,yBAAKP,UAAU,6DAAf,YACYM,EADZ,MACyB,8BAAOE,EAAYU,MAD5C,IAC0DR,EAAQ,GAAK,0BAAMV,UAAU,0BAAhB,KAAqD,0BAAMA,UAAU,6DAAhB,QAAgG,O,wBCEvNmB,GAFEC,UAvBG,SAAC,GAIb,IACAC,EADD,EAHHC,KACEC,kBAAqBC,MAGLC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKxB,YAAYyB,aAEnDC,EAAaR,EAAM,GAEvBA,EAAMS,QACN,IAAMC,EAAaV,EAAMW,KAAI,SAAAN,GAAI,OAAI,kBAAC,EAAD,CAAUO,IAAKP,EAAKC,KAAKO,GAAIhC,KAAMwB,EAAKC,UAE7E,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKtB,MAAM,UACX,yBAAKL,UAAU,qDAAf,eACA,kBAAC,EAAD,CAAUiC,IAAKJ,EAAWF,KAAKO,GAAIhC,KAAM2B,EAAWF,OACpD,yBAAK3B,UAAU,gDAAf,eACA,yBAAKA,UAAU,eAAe+B,KAOd,e,4FCrBtB,SAASI,EAAT,GAAkD,IAAnC5B,EAAkC,EAAlCA,YAAa6B,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMhC,EAAS,EAATA,MAC9BiC,EADuC,OACvCA,KAcFC,EAAkBhC,GAAe+B,EAAKE,aAAajC,YAEzD,OACE,kBAAC,IAAD,CACEkC,eAAgB,CACdL,QAEF/B,MAAOA,EACPqC,cAAa,QAAUJ,EAAKE,aAAanC,MACzCgC,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASvC,GAEX,CACEwC,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASvC,GAEX,CACEsC,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfF,EAAIa,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACN9B,YAAY,IAUC4B","file":"component---src-pages-index-js-7b8995304a92f4f24829.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './header';\nimport Footer from './footer';\nimport './layout.css';\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Header />\n      <section className=\"w-3/4 m-auto\">\n        <div className=\"\">{children}</div>\n      </section>\n      <Footer />\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({ post }) => {\n  const {\n    frontmatter: { path, title, date, description },\n    fields: { readingTime },\n  } = post;\n\n  const timeSince = (date) => {\n    var seconds = Math.floor((new Date() - date) / 1000);  \n    var interval = Math.floor(seconds / 31536000);\n\n    interval = Math.floor(seconds / 86400);\n    if (interval > 1) {\n      return interval;\n    }\n  }\n\n  const since = timeSince(new Date(date));\n\n  return (\n    <div className=\"post\">\n      <Link to={path}>\n        <div className=\"text-2xl text-blog-primary transition-colors duration-500\">\n          {title}\n        </div>\n        <div className=\"text-blog-secondary text-base font-normal mt-3\">\n          {description}\n        </div>\n        <div className=\"text-blog-lightgray text-base font-light mt-3 mb-5 italic\">\n          wrote on {date} &#183; <span>{readingTime.text}</span> {since < 35 ? <span className=\"hidden sm:inline-block\">&#183;&nbsp;<span className=\"new not-italic bg-blog-header p-1 px-2 rounded opacity-50\">New</span></span> : ''}\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostLink;\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostLink from \"../components/post-link\"\n\n//* Components\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) =>{\n  let Posts = edges.filter(edge => edge.node.frontmatter.published);\n  \n  let latestPost = Posts[0];\n  //*\n  Posts.shift();\n  const OtherPosts = Posts.map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n  return (\n    <Layout>\n      <SEO title=\"Hi ðŸ‘‹\" />\n      <div className=\"text-4xl font-light text-blog-lightgray mt-6 mb-4\">Latest post</div>\n      <PostLink key={latestPost.node.id} post={latestPost.node} />\n      <div className=\"text-4xl font-light text-blog-lightgray mb-4\">Other posts</div>\n      <div className=\"posts mb-20\">{OtherPosts}</div>\n    </Layout>\n  )\n} \n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            title\n            description\n            published\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}