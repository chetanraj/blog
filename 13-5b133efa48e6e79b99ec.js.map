{"version":3,"sources":["webpack:///./node_modules/howler/dist/howler.js","webpack:///./node_modules/core-js/modules/es6.typed.uint8-array.js"],"names":["HowlerGlobal","this","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","stop","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","indexOf","apply","fade","from","to","len","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","min","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","exports","global","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","byteOffset"],"mappings":"gFAAA,oBAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAER,EAAQ,QAWR,WACE,aAUA,IAAIA,EAAe,WACjBC,KAAKC,QAGPF,EAAaG,UAAY,CAKvBD,KAAM,WACJ,IAAIE,EAAOH,MAAQI,EAwBnB,OAtBAD,EAAKE,SAAW,IAEhBF,EAAKG,gBAAkB,GACvBH,EAAKI,cAAgB,GAErBJ,EAAKK,QAAU,GACfL,EAAKM,OAAS,GACdN,EAAKO,QAAS,EACdP,EAAKQ,QAAU,EACfR,EAAKS,cAAgB,iBACrBT,EAAKU,WAA+B,oBAAXC,QAA0BA,OAAOC,UAAYD,OAAOC,UAAY,KAEzFZ,EAAKa,WAAa,KAClBb,EAAKc,SAAU,EACfd,EAAKe,eAAgB,EACrBf,EAAKgB,aAAc,EACnBhB,EAAKiB,IAAM,KAEXjB,EAAKkB,YAAa,EAElBlB,EAAKmB,SAEEnB,GAQToB,OAAQ,SAAgBC,GACtB,IAAIrB,EAAOH,MAAQI,EAOnB,GANAoB,EAAMC,WAAWD,GAEZrB,EAAKiB,KACRM,SAGiB,IAARF,GAAuBA,GAAO,GAAKA,GAAO,EAAG,CAGtD,GAFArB,EAAKQ,QAAUa,EAEXrB,EAAKO,OACP,OAAOP,EAILA,EAAKe,eACPf,EAAKa,WAAWW,KAAKC,eAAeJ,EAAKpB,EAAOgB,IAAIS,aAItD,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,EAAKM,OAAOsB,OAAQD,IACtC,IAAK3B,EAAKM,OAAOqB,GAAGE,UAKlB,IAHA,IAAIC,EAAM9B,EAAKM,OAAOqB,GAAGI,eAGhBC,EAAI,EAAGA,EAAIF,EAAIF,OAAQI,IAAK,CACnC,IAAIC,EAAQjC,EAAKM,OAAOqB,GAAGO,WAAWJ,EAAIE,IAEtCC,GAASA,EAAME,QACjBF,EAAME,MAAMf,OAASa,EAAMzB,QAAUa,GAM7C,OAAOrB,EAGT,OAAOA,EAAKQ,SAOd4B,KAAM,SAAcC,GAClB,IAAIrC,EAAOH,MAAQI,EAEdD,EAAKiB,KACRM,IAGFvB,EAAKO,OAAS8B,EAEVrC,EAAKe,eACPf,EAAKa,WAAWW,KAAKC,eAAeY,EAAQ,EAAIrC,EAAKQ,QAASP,EAAOgB,IAAIS,aAI3E,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,EAAKM,OAAOsB,OAAQD,IACtC,IAAK3B,EAAKM,OAAOqB,GAAGE,UAKlB,IAHA,IAAIC,EAAM9B,EAAKM,OAAOqB,GAAGI,eAGhBC,EAAI,EAAGA,EAAIF,EAAIF,OAAQI,IAAK,CACnC,IAAIC,EAAQjC,EAAKM,OAAOqB,GAAGO,WAAWJ,EAAIE,IAEtCC,GAASA,EAAME,QACjBF,EAAME,MAAME,QAAQA,GAAeJ,EAAM1B,QAMjD,OAAOP,GAOTsC,OAAQ,WAGN,IAFA,IAAItC,EAAOH,MAAQI,EAEV0B,EAAI3B,EAAKM,OAAOsB,OAAS,EAAGD,GAAK,EAAGA,IAC3C3B,EAAKM,OAAOqB,GAAGW,SAUjB,OANItC,EAAKe,eAAiBf,EAAKiB,UAAiC,IAAnBjB,EAAKiB,IAAIsB,QACpDvC,EAAKiB,IAAIsB,QACTvC,EAAKiB,IAAM,KACXM,KAGKvB,GAQTwC,OAAQ,SAAgBC,GACtB,OAAQ5C,MAAQI,GAAQI,QAAQoC,EAAIC,QAAQ,MAAO,MAOrDvB,OAAQ,WACN,IAAInB,EAAOH,MAAQI,EAOnB,GALAD,EAAK2C,MAAQ3C,EAAKiB,KAAMjB,EAAKiB,IAAI0B,OAAuB,YAExD3C,EAAK4C,gBAGA5C,EAAKe,cAER,GAAqB,oBAAV8B,MACT,SAGuC,KAF1B,IAAIA,OAECC,mBACd9C,EAAKS,cAAgB,WAEvB,MAAOsC,GACP/C,EAAKc,SAAU,OAGjBd,EAAKc,SAAU,EAKnB,KACa,IAAI+B,OAENR,QACPrC,EAAKc,SAAU,GAEjB,MAAOiC,IAOT,OAJK/C,EAAKc,SACRd,EAAKgD,eAGAhD,GAOTgD,aAAc,WACZ,IAAIhD,EAAOH,MAAQI,EACfgD,EAAY,KAEhB,IACEA,EAA6B,oBAAVJ,MAAwB,IAAIA,MAAU,KACzD,MAAOK,GACP,OAAOlD,EAGT,IAAKiD,GAA8C,mBAA1BA,EAAUE,YACjC,OAAOnD,EAGT,IAAIoD,EAAWH,EAAUE,YAAY,eAAeT,QAAQ,OAAQ,IAEhEW,EAAarD,EAAKU,YAAcV,EAAKU,WAAW4C,UAAUC,MAAM,kBAEhEC,EAAaH,GAAcI,SAASJ,EAAW,GAAGK,MAAM,KAAK,GAAI,IAAM,GAiB3E,OAhBA1D,EAAKK,QAAU,CACbsD,MAASH,IAAeJ,IAAYH,EAAUE,YAAY,cAAcT,QAAQ,OAAQ,KACxFkB,OAAQR,EACRS,OAAQZ,EAAUE,YAAY,4BAA4BT,QAAQ,OAAQ,IAC1EoB,MAAOb,EAAUE,YAAY,8BAA8BT,QAAQ,OAAQ,IAC3EqB,MAAOd,EAAUE,YAAY,8BAA8BT,QAAQ,OAAQ,IAC3EsB,MAAOf,EAAUE,YAAY,yBAAyBT,QAAQ,OAAQ,IACtEuB,MAAOhB,EAAUE,YAAY,cAAcT,QAAQ,OAAQ,IAC3DwB,MAAOjB,EAAUE,YAAY,gBAAgBT,QAAQ,OAAQ,IAC7DyB,OAAQlB,EAAUE,YAAY,iBAAmBF,EAAUE,YAAY,eAAiBF,EAAUE,YAAY,eAAeT,QAAQ,OAAQ,IAC7I0B,OAAQnB,EAAUE,YAAY,iBAAmBF,EAAUE,YAAY,eAAiBF,EAAUE,YAAY,eAAeT,QAAQ,OAAQ,IAC7I2B,OAAQpB,EAAUE,YAAY,+BAA+BT,QAAQ,OAAQ,IAC7E4B,OAAQrB,EAAUE,YAAY,+BAA+BT,QAAQ,OAAQ,IAC7E6B,QAAStB,EAAUE,YAAY,4BAA4BT,QAAQ,OAAQ,IAC3E8B,QAASvB,EAAUE,YAAY,kBAAoBF,EAAUE,YAAY,gBAAgBT,QAAQ,OAAQ,KAEpG1C,GASTyE,aAAc,WACZ,IAAIzE,EAAOH,MAAQI,EAEnB,IAAID,EAAK0E,gBAAmB1E,EAAKiB,IAAjC,CAIAjB,EAAK0E,gBAAiB,EACtB1E,EAAKkB,YAAa,EAIblB,EAAK2E,iBAA2C,QAAxB3E,EAAKiB,IAAI2D,aACpC5E,EAAK2E,iBAAkB,EACvB3E,EAAKsC,UAKPtC,EAAK6E,eAAiB7E,EAAKiB,IAAI6D,aAAa,EAAG,EAAG,OAIlD,IAAIC,EAAS,SAASA,EAAOhC,GAO3B,IAAK,IAAIpB,EAAI,EAAGA,EAAI3B,EAAKI,cAAeuB,IACtC,IACE,IAAIqD,EAAY,IAAInC,MAGpBmC,EAAUC,WAAY,EAEtBjF,EAAKkF,mBAAmBF,GACxB,MAAOjC,GACP/C,EAAKc,SAAU,EAKnB,IAASa,EAAI,EAAGA,EAAI3B,EAAKM,OAAOsB,OAAQD,IACtC,IAAK3B,EAAKM,OAAOqB,GAAGE,UAKlB,IAHA,IAAIC,EAAM9B,EAAKM,OAAOqB,GAAGI,eAGhBC,EAAI,EAAGA,EAAIF,EAAIF,OAAQI,IAAK,CACnC,IAAIC,EAAQjC,EAAKM,OAAOqB,GAAGO,WAAWJ,EAAIE,IAEtCC,GAASA,EAAME,QAAUF,EAAME,MAAM8C,YACvChD,EAAME,MAAM8C,WAAY,EAExBhD,EAAME,MAAMgD,QAOpBnF,EAAKoF,cAGL,IAAIC,EAASrF,EAAKiB,IAAIqE,qBACtBD,EAAOE,OAASvF,EAAK6E,eACrBQ,EAAOG,QAAQxF,EAAKiB,IAAIwE,kBAEI,IAAjBJ,EAAOK,MAChBL,EAAOM,OAAO,GAEdN,EAAOK,MAAM,GAIgB,mBAApB1F,EAAKiB,IAAI2E,QAClB5F,EAAKiB,IAAI2E,SAIXP,EAAOQ,QAAU,WACfR,EAAOS,WAAW,GAElB9F,EAAK0E,gBAAiB,EAEtBqB,SAASC,oBAAoB,aAAcjB,GAAQ,GACnDgB,SAASC,oBAAoB,WAAYjB,GAAQ,GACjDgB,SAASC,oBAAoB,QAASjB,GAAQ,GAE9C,IAAK,IAAIpD,EAAI,EAAGA,EAAI3B,EAAKM,OAAOsB,OAAQD,IACtC3B,EAAKM,OAAOqB,GAAGsE,MAAM,YAS3B,OAHAF,SAASG,iBAAiB,aAAcnB,GAAQ,GAChDgB,SAASG,iBAAiB,WAAYnB,GAAQ,GAC9CgB,SAASG,iBAAiB,QAASnB,GAAQ,GACpC/E,IAQTmG,kBAAmB,WACjB,IAAInG,EAAOH,MAAQI,EAEnB,GAAID,EAAKG,gBAAgByB,OACvB,OAAO5B,EAAKG,gBAAgBiG,MAI9B,IAAIC,GAAW,IAAIxD,OAAQyD,OAQ3B,OANID,GAA+B,oBAAZE,UAA4BF,aAAoBE,SAAoC,mBAAlBF,EAASG,OAChGH,EAAgB,OAAE,WAChBI,QAAQC,KAAK,6EAIV,IAAI7D,OAObqC,mBAAoB,SAA4ByB,GAC9C,IAAI3G,EAAOH,MAAQI,EAMnB,OAJI0G,EAAM1B,WACRjF,EAAKG,gBAAgByG,KAAKD,GAGrB3G,GAQT4C,aAAc,WACZ,IAAI5C,EAAOH,KAEX,GAAKG,EAAKgB,aAAgBhB,EAAKiB,UAAmC,IAArBjB,EAAKiB,IAAI4F,SAA4B5G,EAAOc,cAAzF,CAKA,IAAK,IAAIY,EAAI,EAAGA,EAAI3B,EAAKM,OAAOsB,OAAQD,IACtC,GAAI3B,EAAKM,OAAOqB,GAAGE,UACjB,IAAK,IAAIG,EAAI,EAAGA,EAAIhC,EAAKM,OAAOqB,GAAGmF,QAAQlF,OAAQI,IACjD,IAAKhC,EAAKM,OAAOqB,GAAGmF,QAAQ9E,GAAG+E,QAC7B,OAAO/G,EA4Bf,OAtBIA,EAAKgH,eACPC,aAAajH,EAAKgH,eAIpBhH,EAAKgH,cAAgBE,YAAW,WACzBlH,EAAKgB,cAIVhB,EAAKgH,cAAgB,KACrBhH,EAAK2C,MAAQ,aACb3C,EAAKiB,IAAI4F,UAAUL,MAAK,WACtBxG,EAAK2C,MAAQ,YAET3C,EAAKmH,6BACAnH,EAAKmH,oBAEZnH,EAAKoF,qBAGR,KACIpF,IAOToF,YAAa,WACX,IAAIpF,EAAOH,KAEX,GAAKG,EAAKiB,UAAkC,IAApBjB,EAAKiB,IAAI2E,QAA2B3F,EAAOc,cAwBnE,MApBmB,YAAff,EAAK2C,OAAuB3C,EAAKgH,eACnCC,aAAajH,EAAKgH,eAClBhH,EAAKgH,cAAgB,MACG,cAAfhH,EAAK2C,OACd3C,EAAKiB,IAAI2E,SAASY,MAAK,WACrBxG,EAAK2C,MAAQ,UAEb,IAAK,IAAIhB,EAAI,EAAGA,EAAI3B,EAAKM,OAAOsB,OAAQD,IACtC3B,EAAKM,OAAOqB,GAAGsE,MAAM,aAIrBjG,EAAKgH,gBACPC,aAAajH,EAAKgH,eAClBhH,EAAKgH,cAAgB,OAEC,eAAfhH,EAAK2C,QACd3C,EAAKmH,qBAAsB,GAGtBnH,IAIX,IAAIC,EAAS,IAAIL,EAUbwH,EAAO,SAAcC,GAGlBA,EAAEC,KAAwB,IAAjBD,EAAEC,IAAI1F,OAFT/B,KAONC,KAAKuH,GAJRZ,QAAQc,MAAM,+DAOlBH,EAAKrH,UAAY,CAMfD,KAAM,SAAcuH,GAClB,IAAIrH,EAAOH,KA4FX,OA1FKI,EAAOgB,KACVM,IAIFvB,EAAKwH,UAAYH,EAAEI,WAAY,EAC/BzH,EAAK0H,QAA8B,iBAAbL,EAAEM,OAAsBN,EAAEM,OAAS,CAACN,EAAEM,QAC5D3H,EAAK4H,OAASP,EAAEQ,QAAS,EACzB7H,EAAKO,OAAS8G,EAAEjF,OAAQ,EACxBpC,EAAK8H,MAAQT,EAAEU,OAAQ,EACvB/H,EAAKgI,MAAQX,EAAEY,MAAQ,EACvBjI,EAAKkI,SAAgC,kBAAdb,EAAEc,SAAwBd,EAAEc,QACnDnI,EAAKoI,MAAQf,EAAEgB,MAAQ,EACvBrI,EAAKsI,QAAUjB,EAAEkB,QAAU,GAC3BvI,EAAKwI,KAAwB,iBAAVnB,EAAEC,IAAmBD,EAAEC,IAAM,CAACD,EAAEC,KACnDtH,EAAKQ,aAAuBiI,IAAbpB,EAAEjG,OAAuBiG,EAAEjG,OAAS,EACnDpB,EAAK0I,oBAAsBrB,EAAEsB,qBAAsB,EAEnD3I,EAAK4I,UAAY,EACjB5I,EAAK6I,OAAS,WACd7I,EAAK8G,QAAU,GACf9G,EAAK8I,WAAa,GAClB9I,EAAK+I,OAAS,GACd/I,EAAKgJ,WAAY,EAEjBhJ,EAAKiJ,OAAS5B,EAAE6B,MAAQ,CAAC,CACvBC,GAAI9B,EAAE6B,QACH,GACLlJ,EAAKoJ,QAAU/B,EAAEgC,OAAS,CAAC,CACzBF,GAAI9B,EAAEgC,SACH,GACLrJ,EAAKsJ,QAAUjC,EAAEkC,OAAS,CAAC,CACzBJ,GAAI9B,EAAEkC,SACH,GACLvJ,EAAKwJ,aAAenC,EAAEoC,YAAc,CAAC,CACnCN,GAAI9B,EAAEoC,cACH,GACLzJ,EAAK0J,aAAerC,EAAEsC,YAAc,CAAC,CACnCR,GAAI9B,EAAEsC,cACH,GACL3J,EAAK4J,SAAWvC,EAAEwC,QAAU,CAAC,CAC3BV,GAAI9B,EAAEwC,UACH,GACL7J,EAAK8J,QAAUzC,EAAE0C,OAAS,CAAC,CACzBZ,GAAI9B,EAAE0C,SACH,GACL/J,EAAKgK,QAAU3C,EAAE4C,OAAS,CAAC,CACzBd,GAAI9B,EAAE4C,SACH,GACLjK,EAAKkK,QAAU7C,EAAE8C,OAAS,CAAC,CACzBhB,GAAI9B,EAAE8C,SACH,GACLnK,EAAKoK,UAAY/C,EAAEgD,SAAW,CAAC,CAC7BlB,GAAI9B,EAAEgD,WACH,GACLrK,EAAKsK,QAAUjD,EAAEkD,OAAS,CAAC,CACzBpB,GAAI9B,EAAEkD,SACH,GACLvK,EAAKwK,QAAUnD,EAAEoD,OAAS,CAAC,CACzBtB,GAAI9B,EAAEoD,SACH,GACLzK,EAAK0K,UAAYrD,EAAEsD,SAAW,CAAC,CAC7BxB,GAAI9B,EAAEsD,WACH,GACL3K,EAAK4K,UAAY,GAEjB5K,EAAK6B,UAAY5B,EAAOc,gBAAkBf,EAAK4H,YAErB,IAAf3H,EAAOgB,KAAuBhB,EAAOgB,KAAOhB,EAAOiB,YAC5DjB,EAAOwE,eAITxE,EAAOK,OAAOsG,KAAK5G,GAGfA,EAAKwH,WACPxH,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,OACPC,OAAQ,WACN9K,EAAKsG,UAMPtG,EAAKkI,UACPlI,EAAKmF,OAGAnF,GAOTmF,KAAM,WACJ,IACI4F,EAAM,KAEV,GAAI9K,EAAOa,QAHAjB,KAIJoG,MAAM,YAAa,KAAM,yBADhC,CAOyB,iBAVdpG,KAUK2I,OAVL3I,KAWJ2I,KAAO,CAXH3I,KAWS2I,OAIpB,IAAK,IAAI7G,EAAI,EAAGA,EAfL9B,KAec2I,KAAK5G,OAAQD,IAAK,CACzC,IAAIc,EAAKuI,EAET,GAlBSnL,KAkBA6H,SAlBA7H,KAkBgB6H,QAAQ/F,GAE/Bc,EApBO5C,KAoBI6H,QAAQ/F,OACd,CAIL,GAAmB,iBAFnBqJ,EAvBOnL,KAuBI2I,KAAK7G,IAEa,CAzBtB9B,KA0BAoG,MAAM,YAAa,KAAM,0DAE9B,UAIFxD,EAAM,0BAA0BwI,KAAKD,MAGnCvI,EAAM,aAAawI,KAAKD,EAAItH,MAAM,IAAK,GAAG,KAGxCjB,IACFA,EAAMA,EAAI,GAAGyI,eAUjB,GALKzI,GACHgE,QAAQC,KAAK,8FAIXjE,GAAOxC,EAAOuC,OAAOC,GAAM,CAC7BsI,EAlDOlL,KAkDI2I,KAAK7G,GAChB,OAIJ,GAAKoJ,EAsBL,OA7EWlL,KA6DN2I,KAAOuC,EA7DDlL,KA8DNgJ,OAAS,UAGmB,WAA7BlI,OAAOwK,SAASC,UAA6C,UAApBL,EAAIM,MAAM,EAAG,KAjE/CxL,KAkEJ+H,QAAS,EAlEL/H,KAmEJgC,WAAY,GAInB,IAAIyJ,EAvEOzL,WAyEFgC,WACP0J,EA1ES1L,gBAwDJoG,MAAM,YAAa,KAAM,kDA8BlCK,KAAM,SAAciC,EAAQiD,GAC1B,IAAIxL,EAAOH,KACP4L,EAAK,KAET,GAAsB,iBAAXlD,EACTkD,EAAKlD,EACLA,EAAS,SACJ,IAAsB,iBAAXA,GAAuC,WAAhBvI,EAAK6I,SAAwB7I,EAAKsI,QAAQC,GAEjF,OAAO,KACF,QAAsB,IAAXA,IAEhBA,EAAS,aAGJvI,EAAKgJ,WAAW,CAGnB,IAFA,IAAI0C,EAAM,EAED/J,EAAI,EAAGA,EAAI3B,EAAK8G,QAAQlF,OAAQD,IACnC3B,EAAK8G,QAAQnF,GAAGoF,UAAY/G,EAAK8G,QAAQnF,GAAGgK,SAC9CD,IACAD,EAAKzL,EAAK8G,QAAQnF,GAAGiK,KAIb,IAARF,EACFnD,EAAS,KAETkD,EAAK,MAMX,IAAIxJ,EAAQwJ,EAAKzL,EAAKkC,WAAWuJ,GAAMzL,EAAK6L,iBAE5C,IAAK5J,EACH,OAAO,KAWT,GAPIwJ,IAAOlD,IACTA,EAAStG,EAAMqG,SAAW,aAMR,WAAhBtI,EAAK6I,OAAqB,CAE5B5G,EAAMqG,QAAUC,EAEhBtG,EAAM0J,QAAS,EAEf,IAAIG,EAAU7J,EAAM2J,IASpB,OAPA5L,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,OACPC,OAAQ,WACN9K,EAAKsG,KAAKwF,MAIPA,EAIT,GAAIL,IAAOxJ,EAAM8E,QAMf,OAJKyE,GACHxL,EAAK+L,WAAW,QAGX9J,EAAM2J,IAIX5L,EAAK6B,WACP5B,EAAOmF,cAIT,IAAI4G,EAAOC,KAAKC,IAAI,EAAGjK,EAAMkK,MAAQ,EAAIlK,EAAMkK,MAAQnM,EAAKsI,QAAQC,GAAQ,GAAK,KAC7E6D,EAAWH,KAAKC,IAAI,GAAIlM,EAAKsI,QAAQC,GAAQ,GAAKvI,EAAKsI,QAAQC,GAAQ,IAAM,IAAOyD,GACpFK,EAAqB,IAAXD,EAAkBH,KAAKK,IAAIrK,EAAMmG,OAC3C1C,EAAQ1F,EAAKsI,QAAQC,GAAQ,GAAK,IAClCgE,GAAQvM,EAAKsI,QAAQC,GAAQ,GAAKvI,EAAKsI,QAAQC,GAAQ,IAAM,IACjEtG,EAAMqG,QAAUC,EAGhBtG,EAAM0J,QAAS,EAEf,IAAIa,EAAY,WACdvK,EAAM8E,SAAU,EAChB9E,EAAMkK,MAAQH,EACd/J,EAAMwK,OAAS/G,EACfzD,EAAMyK,MAAQH,EACdtK,EAAM6F,SAAW7F,EAAM6F,QAAS9H,EAAKsI,QAAQC,GAAQ,KAIvD,KAAIyD,GAAQO,GAAZ,CAOA,IAAII,EAAO1K,EAAME,MAEjB,GAAInC,EAAK6B,UAAW,CAElB,IAAI+K,EAAe,WACjB5M,EAAKgJ,WAAY,EACjBwD,IAEAxM,EAAK6M,eAAe5K,GAGpB,IAAIZ,EAAMY,EAAM1B,QAAUP,EAAKO,OAAS,EAAI0B,EAAMzB,QAClDmM,EAAKnL,KAAKC,eAAeJ,EAAKpB,EAAOgB,IAAIS,aACzCO,EAAM6K,WAAa7M,EAAOgB,IAAIS,iBAES,IAA5BiL,EAAKI,aAAarH,MAC3BzD,EAAM6F,MAAQ6E,EAAKI,aAAaC,YAAY,EAAGhB,EAAM,OAASW,EAAKI,aAAaC,YAAY,EAAGhB,EAAMI,GAErGnK,EAAM6F,MAAQ6E,EAAKI,aAAarH,MAAM,EAAGsG,EAAM,OAASW,EAAKI,aAAarH,MAAM,EAAGsG,EAAMI,GAIvFC,IAAYY,MACdjN,EAAK8I,WAAW7G,EAAM2J,KAAO1E,WAAWlH,EAAK2L,OAAOuB,KAAKlN,EAAMiC,GAAQoK,IAGpEb,GACHtE,YAAW,WACTlH,EAAKiG,MAAM,OAAQhE,EAAM2J,KAEzB5L,EAAK+L,eACJ,IAIc,YAAjB9L,EAAO0C,MACTiK,KAEA5M,EAAKgJ,WAAY,EAEjBhJ,EAAKmN,KAAK,SAAUP,GAEpB5M,EAAKoN,YAAYnL,EAAM2J,UAEpB,CAEL,IAAIyB,EAAY,WACdV,EAAKjL,YAAcsK,EACnBW,EAAKtK,MAAQJ,EAAM1B,QAAUP,EAAKO,QAAUN,EAAOM,QAAUoM,EAAKtK,MAClEsK,EAAKvL,OAASa,EAAMzB,QAAUP,EAAOmB,SACrCuL,EAAKW,aAAerL,EAAMmG,MAE1B,IACE,IAAI9B,EAAOqG,EAAKrG,OAsChB,GApCIA,GAA2B,oBAAZC,UAA4BD,aAAgBC,SAAgC,mBAAdD,EAAKE,OAEpFxG,EAAKgJ,WAAY,EAEjBwD,IAEAlG,EAAKE,MAAK,WACRxG,EAAKgJ,WAAY,EACjB2D,EAAK1H,WAAY,EAEZuG,IACHxL,EAAKiG,MAAM,OAAQhE,EAAM2J,KAEzB5L,EAAK+L,iBAEC,OAAE,WACV/L,EAAKgJ,WAAY,EAEjBhJ,EAAKiG,MAAM,YAAahE,EAAM2J,IAAK,+IAGnC3J,EAAM0J,QAAS,EACf1J,EAAM8E,SAAU,MAERyE,IACVxL,EAAKgJ,WAAY,EACjBwD,IAEAxM,EAAKiG,MAAM,OAAQhE,EAAM2J,KAEzB5L,EAAK+L,cAIPY,EAAKW,aAAerL,EAAMmG,MAEtBuE,EAAKY,OAGP,YAFAvN,EAAKiG,MAAM,YAAahE,EAAM2J,IAAK,+IAMtB,cAAXrD,GAA0BtG,EAAM6F,MAClC9H,EAAK8I,WAAW7G,EAAM2J,KAAO1E,WAAWlH,EAAK2L,OAAOuB,KAAKlN,EAAMiC,GAAQoK,IAEvErM,EAAK8I,WAAW7G,EAAM2J,KAAO,WAE3B5L,EAAK2L,OAAO1J,GAGZ0K,EAAK3G,oBAAoB,QAAShG,EAAK8I,WAAW7G,EAAM2J,MAAM,IAGhEe,EAAKzG,iBAAiB,QAASlG,EAAK8I,WAAW7G,EAAM2J,MAAM,IAE7D,MAAO1I,GACPlD,EAAKiG,MAAM,YAAahE,EAAM2J,IAAK1I,KAKtB,2FAAbyJ,EAAKrF,MACPqF,EAAKrF,IAAMtH,EAAKwI,KAChBmE,EAAKxH,QAIP,IAAIqI,EAAqB7M,QAAUA,OAAO8M,SAAWd,EAAKe,YAAczN,EAAOS,WAAWiN,WAE1F,GAAIhB,EAAKe,YAAc,GAAKF,EAC1BH,QACK,CACLrN,EAAKgJ,WAAY,EASjB2D,EAAKzG,iBAAiBjG,EAAOQ,eAPd,SAASmN,IAEtBP,IAEAV,EAAK3G,oBAAoB/F,EAAOQ,cAAemN,GAAU,MAGL,GAEtD5N,EAAKoN,YAAYnL,EAAM2J,MAI3B,OAAO3J,EAAM2J,IArJX5L,EAAK2L,OAAO1J,IA6JhB4L,MAAO,SAAepC,GACpB,IAAIzL,EAAOH,KAEX,GAAoB,WAAhBG,EAAK6I,QAAuB7I,EAAKgJ,UAQnC,OAPAhJ,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,QACPC,OAAQ,WACN9K,EAAK6N,MAAMpC,MAIRzL,EAMT,IAFA,IAAI8B,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAAK,CAEnC3B,EAAKoN,YAAYtL,EAAIH,IAGrB,IAAIM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAEhC,GAAIM,IAAUA,EAAM8E,UAElB9E,EAAMkK,MAAQnM,EAAKgM,KAAKlK,EAAIH,IAC5BM,EAAM6L,UAAY,EAClB7L,EAAM8E,SAAU,EAEhB/G,EAAK+N,UAAUjM,EAAIH,IAEfM,EAAME,OACR,GAAInC,EAAK6B,UAAW,CAElB,IAAKI,EAAME,MAAM4K,aACf,cAG2C,IAAlC9K,EAAME,MAAM4K,aAAaR,KAClCtK,EAAME,MAAM4K,aAAaiB,QAAQ,GAEjC/L,EAAME,MAAM4K,aAAaR,KAAK,GAIhCvM,EAAKiO,aAAahM,EAAME,YACd+L,MAAMjM,EAAME,MAAMiK,WAAanK,EAAME,MAAMiK,WAAaa,KAClEhL,EAAME,MAAM0L,QAMbM,UAAU,IACbnO,EAAKiG,MAAM,QAAShE,EAAQA,EAAM2J,IAAM,MAI5C,OAAO5L,GASTuM,KAAM,SAAcd,EAAID,GACtB,IAAIxL,EAAOH,KAEX,GAAoB,WAAhBG,EAAK6I,QAAuB7I,EAAKgJ,UAQnC,OAPAhJ,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,OACPC,OAAQ,WACN9K,EAAKuM,KAAKd,MAIPzL,EAMT,IAFA,IAAI8B,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAAK,CAEnC3B,EAAKoN,YAAYtL,EAAIH,IAGrB,IAAIM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAE5BM,IAEFA,EAAMkK,MAAQlK,EAAMwK,QAAU,EAC9BxK,EAAM6L,UAAY,EAClB7L,EAAM8E,SAAU,EAChB9E,EAAM0J,QAAS,EAEf3L,EAAK+N,UAAUjM,EAAIH,IAEfM,EAAME,QACJnC,EAAK6B,UAEHI,EAAME,MAAM4K,oBAC+B,IAAlC9K,EAAME,MAAM4K,aAAaR,KAClCtK,EAAME,MAAM4K,aAAaiB,QAAQ,GAEjC/L,EAAME,MAAM4K,aAAaR,KAAK,GAIhCvM,EAAKiO,aAAahM,EAAME,QAEhB+L,MAAMjM,EAAME,MAAMiK,WAAanK,EAAME,MAAMiK,WAAaa,MAClEhL,EAAME,MAAMT,YAAcO,EAAMwK,QAAU,EAE1CxK,EAAME,MAAM0L,QAGR5L,EAAME,MAAMiK,WAAaa,KAC3BjN,EAAKoO,YAAYnM,EAAME,SAKxBqJ,GACHxL,EAAKiG,MAAM,OAAQhE,EAAM2J,MAK/B,OAAO5L,GASToC,KAAM,SAAcC,EAAOoJ,GACzB,IAAIzL,EAAOH,KAEX,GAAoB,WAAhBG,EAAK6I,QAAuB7I,EAAKgJ,UAQnC,OAPAhJ,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,OACPC,OAAQ,WACN9K,EAAKoC,KAAKC,EAAOoJ,MAIdzL,EAIT,QAAkB,IAAPyL,EAAoB,CAC7B,GAAqB,kBAAVpJ,EAGT,OAAOrC,EAAKO,OAFZP,EAAKO,OAAS8B,EASlB,IAFA,IAAIP,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAAK,CAEnC,IAAIM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAE5BM,IACFA,EAAM1B,OAAS8B,EAEXJ,EAAMoM,WACRrO,EAAK+N,UAAU9L,EAAM2J,KAGnB5L,EAAK6B,WAAaI,EAAME,MAC1BF,EAAME,MAAMX,KAAKC,eAAeY,EAAQ,EAAIJ,EAAMzB,QAASP,EAAOgB,IAAIS,aAC7DO,EAAME,QACfF,EAAME,MAAME,QAAQpC,EAAOM,QAAgB8B,GAG7CrC,EAAKiG,MAAM,OAAQhE,EAAM2J,MAI7B,OAAO5L,GAWToB,OAAQ,WACN,IAEIC,EAAKoK,EAsBLxJ,EAxBAjC,EAAOH,KACPyO,EAAOH,UAGX,GAAoB,IAAhBG,EAAK1M,OAEP,OAAO5B,EAAKQ,QACP,GAAoB,IAAhB8N,EAAK1M,QAAgC,IAAhB0M,EAAK1M,aAAmC,IAAZ0M,EAAK,GAAoB,CAEnF,IAAIxM,EAAM9B,EAAK+B,eAEXwM,EAAQzM,EAAI0M,QAAQF,EAAK,IAEzBC,GAAS,EACX9C,EAAKhI,SAAS6K,EAAK,GAAI,IAEvBjN,EAAMC,WAAWgN,EAAK,SAEfA,EAAK1M,QAAU,IACxBP,EAAMC,WAAWgN,EAAK,IACtB7C,EAAKhI,SAAS6K,EAAK,GAAI,KAMzB,UAAmB,IAARjN,GAAuBA,GAAO,GAAKA,GAAO,GA2CnD,OADAY,EAAQwJ,EAAKzL,EAAKkC,WAAWuJ,GAAMzL,EAAK8G,QAAQ,IACjC7E,EAAMzB,QAAU,EAzC/B,GAAoB,WAAhBR,EAAK6I,QAAuB7I,EAAKgJ,UAQnC,OAPAhJ,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,SACPC,OAAQ,WACN9K,EAAKoB,OAAOqN,MAAMzO,EAAMsO,MAIrBtO,OAIS,IAAPyL,IACTzL,EAAKQ,QAAUa,GAIjBoK,EAAKzL,EAAK+B,aAAa0J,GAEvB,IAAK,IAAI9J,EAAI,EAAGA,EAAI8J,EAAG7J,OAAQD,KAE7BM,EAAQjC,EAAKkC,WAAWuJ,EAAG9J,OAGzBM,EAAMzB,QAAUa,EAEXiN,EAAK,IACRtO,EAAK+N,UAAUtC,EAAG9J,IAGhB3B,EAAK6B,WAAaI,EAAME,QAAUF,EAAM1B,OAC1C0B,EAAME,MAAMX,KAAKC,eAAeJ,EAAKpB,EAAOgB,IAAIS,aACvCO,EAAME,QAAUF,EAAM1B,SAC/B0B,EAAME,MAAMf,OAASC,EAAMpB,EAAOmB,UAGpCpB,EAAKiG,MAAM,SAAUhE,EAAM2J,MAQjC,OAAO5L,GAWT0O,KAAM,SAAcC,EAAMC,EAAIC,EAAKpD,GACjC,IAAIzL,EAAOH,KAEX,GAAoB,WAAhBG,EAAK6I,QAAuB7I,EAAKgJ,UAQnC,OAPAhJ,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,OACPC,OAAQ,WACN9K,EAAK0O,KAAKC,EAAMC,EAAIC,EAAKpD,MAItBzL,EAIT2O,EAAOrN,WAAWqN,GAClBC,EAAKtN,WAAWsN,GAChBC,EAAMvN,WAAWuN,GAEjB7O,EAAKoB,OAAOuN,EAAMlD,GAIlB,IAFA,IAAI3J,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAAK,CAEnC,IAAIM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAGhC,GAAIM,EAAO,CAOT,GALKwJ,GACHzL,EAAK+N,UAAUjM,EAAIH,IAIjB3B,EAAK6B,YAAcI,EAAM1B,OAAQ,CACnC,IAAImB,EAAczB,EAAOgB,IAAIS,YACzBoN,EAAMpN,EAAcmN,EAAM,IAC9B5M,EAAMzB,QAAUmO,EAEhB1M,EAAME,MAAMX,KAAKC,eAAekN,EAAMjN,GAEtCO,EAAME,MAAMX,KAAKuN,wBAAwBH,EAAIE,GAG/C9O,EAAKgP,mBAAmB/M,EAAO0M,EAAMC,EAAIC,EAAK/M,EAAIH,QAAkB,IAAP8J,IAIjE,OAAOzL,GAYTgP,mBAAoB,SAA4B/M,EAAO0M,EAAMC,EAAIC,EAAKpD,EAAIwD,GACxE,IAAIjP,EAAOH,KACPwB,EAAMsN,EACNO,EAAON,EAAKD,EACZQ,EAAQlD,KAAKK,IAAI4C,EAAO,KACxBE,EAAUnD,KAAKC,IAAI,EAAGiD,EAAQ,EAAIN,EAAMM,EAAQN,GAChDQ,EAAWC,KAAKC,MAEpBtN,EAAMuN,QAAUZ,EAEhB3M,EAAMoM,UAAYoB,aAAY,WAE5B,IAAIC,GAAQJ,KAAKC,MAAQF,GAAYR,EACrCQ,EAAWC,KAAKC,MAChBlO,GAAO6N,EAAOQ,EAEdrO,EAAM4K,KAAKC,IAAI,EAAG7K,GAClBA,EAAM4K,KAAK0D,IAAI,EAAGtO,GAElBA,EAAM4K,KAAK2D,MAAY,IAANvO,GAAa,IAE1BrB,EAAK6B,UACPI,EAAMzB,QAAUa,EAEhBrB,EAAKoB,OAAOC,EAAKY,EAAM2J,KAAK,GAI1BqD,IACFjP,EAAKQ,QAAUa,IAIbuN,EAAKD,GAAQtN,GAAOuN,GAAMA,EAAKD,GAAQtN,GAAOuN,KAChDiB,cAAc5N,EAAMoM,WACpBpM,EAAMoM,UAAY,KAClBpM,EAAMuN,QAAU,KAChBxP,EAAKoB,OAAOwN,EAAI3M,EAAM2J,KAEtB5L,EAAKiG,MAAM,OAAQhE,EAAM2J,QAE1BwD,IASLrB,UAAW,SAAmBtC,GAC5B,IAEIxJ,EAFOpC,KAEMqC,WAAWuJ,GAe5B,OAbIxJ,GAASA,EAAMoM,YAJRxO,KAKAgC,WACPI,EAAME,MAAMX,KAAKsO,sBAAsB7P,EAAOgB,IAAIS,aAGpDmO,cAAc5N,EAAMoM,WACpBpM,EAAMoM,UAAY,KAVTxO,KAWJuB,OAAOa,EAAMuN,QAAS/D,GAC3BxJ,EAAMuN,QAAU,KAZP3P,KAcJoG,MAAM,OAAQwF,IAdV5L,MA4BbkI,KAAM,WACJ,IAEIA,EAAM0D,EAAIxJ,EAFVjC,EAAOH,KACPyO,EAAOH,UAGX,GAAoB,IAAhBG,EAAK1M,OAEP,OAAO5B,EAAK8H,MACP,GAAoB,IAAhBwG,EAAK1M,OAAc,CAC5B,GAAuB,kBAAZ0M,EAAK,GAMd,SADArM,EAAQjC,EAAKkC,WAAWuB,SAAS6K,EAAK,GAAI,OAC3BrM,EAAM6F,MALrBC,EAAOuG,EAAK,GACZtO,EAAK8H,MAAQC,OAMU,IAAhBuG,EAAK1M,SACdmG,EAAOuG,EAAK,GACZ7C,EAAKhI,SAAS6K,EAAK,GAAI,KAMzB,IAFA,IAAIxM,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,KAC9BM,EAAQjC,EAAKkC,WAAWJ,EAAIH,OAG1BM,EAAM6F,MAAQC,EAEV/H,EAAK6B,WAAaI,EAAME,OAASF,EAAME,MAAM4K,eAC/C9K,EAAME,MAAM4K,aAAahF,KAAOA,EAE5BA,IACF9F,EAAME,MAAM4K,aAAagD,UAAY9N,EAAMwK,QAAU,EACrDxK,EAAME,MAAM4K,aAAaiD,QAAU/N,EAAMyK,SAMjD,OAAO1M,GAWTqI,KAAM,WACJ,IAEIA,EAAMoD,EAsBNxJ,EAxBAjC,EAAOH,KACPyO,EAAOH,UAGX,GAAoB,IAAhBG,EAAK1M,OAEP6J,EAAKzL,EAAK8G,QAAQ,GAAG8E,SAChB,GAAoB,IAAhB0C,EAAK1M,OAAc,CAE5B,IAAIE,EAAM9B,EAAK+B,eAEXwM,EAAQzM,EAAI0M,QAAQF,EAAK,IAEzBC,GAAS,EACX9C,EAAKhI,SAAS6K,EAAK,GAAI,IAEvBjG,EAAO/G,WAAWgN,EAAK,SAEA,IAAhBA,EAAK1M,SACdyG,EAAO/G,WAAWgN,EAAK,IACvB7C,EAAKhI,SAAS6K,EAAK,GAAI,KAMzB,GAAoB,iBAATjG,EAyDT,OADApG,EAAQjC,EAAKkC,WAAWuJ,IACTxJ,EAAMmG,MAAQpI,EAAKoI,MAvDlC,GAAoB,WAAhBpI,EAAK6I,QAAuB7I,EAAKgJ,UAQnC,OAPAhJ,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,OACPC,OAAQ,WACN9K,EAAKqI,KAAKoG,MAAMzO,EAAMsO,MAInBtO,OAIS,IAAPyL,IACTzL,EAAKoI,MAAQC,GAIfoD,EAAKzL,EAAK+B,aAAa0J,GAEvB,IAAK,IAAI9J,EAAI,EAAGA,EAAI8J,EAAG7J,OAAQD,IAI7B,GAFAM,EAAQjC,EAAKkC,WAAWuJ,EAAG9J,IAEhB,CAGL3B,EAAKiQ,QAAQxE,EAAG9J,MAClBM,EAAM6L,UAAY9N,EAAKgM,KAAKP,EAAG9J,IAC/BM,EAAM6K,WAAa9M,EAAK6B,UAAY5B,EAAOgB,IAAIS,YAAcO,EAAM6K,YAGrE7K,EAAMmG,MAAQC,EAEVrI,EAAK6B,WAAaI,EAAME,OAASF,EAAME,MAAM4K,aAC/C9K,EAAME,MAAM4K,aAAaO,aAAa7L,eAAe4G,EAAMpI,EAAOgB,IAAIS,aAC7DO,EAAME,QACfF,EAAME,MAAMmL,aAAejF,GAI7B,IAAI2D,EAAOhM,EAAKgM,KAAKP,EAAG9J,IACpByK,GAAYpM,EAAKsI,QAAQrG,EAAMqG,SAAS,GAAKtI,EAAKsI,QAAQrG,EAAMqG,SAAS,IAAM,IAAO0D,EACtFK,EAAqB,IAAXD,EAAkBH,KAAKK,IAAIrK,EAAMmG,QAE3CpI,EAAK8I,WAAW2C,EAAG9J,KAAQM,EAAM8E,UACnC/G,EAAKoN,YAAY3B,EAAG9J,IAEpB3B,EAAK8I,WAAW2C,EAAG9J,IAAMuF,WAAWlH,EAAK2L,OAAOuB,KAAKlN,EAAMiC,GAAQoK,IAGrErM,EAAKiG,MAAM,OAAQhE,EAAM2J,KAQ/B,OAAO5L,GAWTgM,KAAM,WACJ,IAEIA,EAAMP,EAFNzL,EAAOH,KACPyO,EAAOH,UAGX,GAAoB,IAAhBG,EAAK1M,OAEP6J,EAAKzL,EAAK8G,QAAQ,GAAG8E,SAChB,GAAoB,IAAhB0C,EAAK1M,OAAc,CAE5B,IAAIE,EAAM9B,EAAK+B,eAEXwM,EAAQzM,EAAI0M,QAAQF,EAAK,IAEzBC,GAAS,EACX9C,EAAKhI,SAAS6K,EAAK,GAAI,IACdtO,EAAK8G,QAAQlF,SACtB6J,EAAKzL,EAAK8G,QAAQ,GAAG8E,IACrBI,EAAO1K,WAAWgN,EAAK,UAEA,IAAhBA,EAAK1M,SACdoK,EAAO1K,WAAWgN,EAAK,IACvB7C,EAAKhI,SAAS6K,EAAK,GAAI,KAIzB,QAAkB,IAAP7C,EACT,OAAOzL,EAIT,GAAoB,WAAhBA,EAAK6I,QAAuB7I,EAAKgJ,UAQnC,OAPAhJ,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,OACPC,OAAQ,WACN9K,EAAKgM,KAAKyC,MAAMzO,EAAMsO,MAInBtO,EAIT,IAAIiC,EAAQjC,EAAKkC,WAAWuJ,GAE5B,GAAIxJ,EAAO,CACT,KAAoB,iBAAT+J,GAAqBA,GAAQ,GA2CjC,CACL,GAAIhM,EAAK6B,UAAW,CAClB,IAAIqO,EAAWlQ,EAAKiQ,QAAQxE,GAAMxL,EAAOgB,IAAIS,YAAcO,EAAM6K,WAAa,EAC1EqD,EAAWlO,EAAM6L,UAAY7L,EAAM6L,UAAY7L,EAAMkK,MAAQ,EACjE,OAAOlK,EAAMkK,OAASgE,EAAWD,EAAWjE,KAAKK,IAAIrK,EAAMmG,QAE3D,OAAOnG,EAAME,MAAMT,YA/CrB,IAAIuO,EAAUjQ,EAAKiQ,QAAQxE,GAEvBwE,GACFjQ,EAAK6N,MAAMpC,GAAI,GAIjBxJ,EAAMkK,MAAQH,EACd/J,EAAM0J,QAAS,EAEf3L,EAAKoN,YAAY3B,GAGZzL,EAAK6B,YAAaI,EAAME,OAAU+L,MAAMjM,EAAME,MAAMiK,YACvDnK,EAAME,MAAMT,YAAcsK,GAI5B,IAAIoE,EAAc,WAChBpQ,EAAKiG,MAAM,OAAQwF,GAGfwE,GACFjQ,EAAKsG,KAAKmF,GAAI,IAKlB,GAAIwE,IAAYjQ,EAAK6B,UAAW,CAC9B,IAAIwO,EAAW,SAASA,IACjBrQ,EAAKgJ,UAGR9B,WAAWmJ,EAAU,GAFrBD,KAMJlJ,WAAWmJ,EAAU,QAErBD,IAaN,OAAOpQ,GAQTiQ,QAAS,SAAiBxE,GAGxB,GAAkB,iBAAPA,EAAiB,CAC1B,IAAIxJ,EAHKpC,KAGQqC,WAAWuJ,GAE5B,QAAOxJ,IAASA,EAAM8E,QAIxB,IAAK,IAAIpF,EAAI,EAAGA,EATL9B,KASciH,QAAQlF,OAAQD,IACvC,IAVS9B,KAUCiH,QAAQnF,GAAGoF,QACnB,OAAO,EAIX,OAAO,GAQTqF,SAAU,SAAkBX,GAC1B,IACIW,EADOvM,KACS+I,UAEhB3G,EAHOpC,KAGMqC,WAAWuJ,GAM5B,OAJIxJ,IACFmK,EANSvM,KAMOyI,QAAQrG,EAAMqG,SAAS,GAAK,KAGvC8D,GAOTzJ,MAAO,WACL,OAAO9C,KAAKgJ,QAOdvG,OAAQ,WAKN,IAJA,IAAItC,EAAOH,KAEPyQ,EAAStQ,EAAK8G,QAETnF,EAAI,EAAGA,EAAI2O,EAAO1O,OAAQD,IAE5B2O,EAAO3O,GAAGoF,SACb/G,EAAKuM,KAAK+D,EAAO3O,GAAGiK,KAIjB5L,EAAK6B,YAER7B,EAAKoO,YAAYkC,EAAO3O,GAAGQ,OAG3BmO,EAAO3O,GAAGQ,MAAM6D,oBAAoB,QAASsK,EAAO3O,GAAG4O,UAAU,GAEjED,EAAO3O,GAAGQ,MAAM6D,oBAAoB/F,EAAOQ,cAAe6P,EAAO3O,GAAG6O,SAAS,GAG7EvQ,EAAOiF,mBAAmBoL,EAAO3O,GAAGQ,eAI/BmO,EAAO3O,GAAGQ,MAEjBnC,EAAKoN,YAAYkD,EAAO3O,GAAGiK,KAI7B,IAAI2C,EAAQtO,EAAOK,OAAOkO,QAAQxO,GAE9BuO,GAAS,GACXtO,EAAOK,OAAOmQ,OAAOlC,EAAO,GAI9B,IAAImC,GAAW,EAEf,IAAK/O,EAAI,EAAGA,EAAI1B,EAAOK,OAAOsB,OAAQD,IACpC,GAAI1B,EAAOK,OAAOqB,GAAG6G,OAASxI,EAAKwI,MAAQxI,EAAKwI,KAAKgG,QAAQvO,EAAOK,OAAOqB,GAAG6G,OAAS,EAAG,CACxFkI,GAAW,EACX,MAcJ,OAVIC,GAASD,UACJC,EAAM3Q,EAAKwI,MAIpBvI,EAAOa,SAAU,EAEjBd,EAAK6I,OAAS,WACd7I,EAAK8G,QAAU,GACf9G,EAAO,KACA,MAWT4Q,GAAI,SAAY/F,EAAO1B,EAAIsC,EAAI0B,GAC7B,IACI0D,EADOhR,KACO,MAAQgL,GAa1B,MAXkB,mBAAP1B,GACT0H,EAAOjK,KAAKuG,EAAO,CACjB1B,GAAIA,EACJtC,GAAIA,EACJgE,KAAMA,GACJ,CACF1B,GAAIA,EACJtC,GAAIA,IAVGtJ,MAwBbiR,IAAK,SAAajG,EAAO1B,EAAIsC,GAC3B,IACIoF,EADOhR,KACO,MAAQgL,GACtBlJ,EAAI,EAOR,GALkB,iBAAPwH,IACTsC,EAAKtC,EACLA,EAAK,MAGHA,GAAMsC,EAER,IAAK9J,EAAI,EAAGA,EAAIkP,EAAOjP,OAAQD,IAAK,CAClC,IAAIoP,EAAOtF,IAAOoF,EAAOlP,GAAG8J,GAE5B,GAAItC,IAAO0H,EAAOlP,GAAGwH,IAAM4H,IAAS5H,GAAM4H,EAAM,CAC9CF,EAAOJ,OAAO9O,EAAG,GACjB,YAGC,GAAIkJ,EAnBAhL,KAqBJ,MAAQgL,GAAS,OACjB,CAEL,IAAImG,EAAOC,OAAOD,KAxBTnR,MA0BT,IAAK8B,EAAI,EAAGA,EAAIqP,EAAKpP,OAAQD,IACI,IAA3BqP,EAAKrP,GAAG6M,QAAQ,QAAgB0C,MAAMC,QA3BnCtR,KA2BgDmR,EAAKrP,OA3BrD9B,KA4BAmR,EAAKrP,IAAM,IAKtB,OAjCW9B,MA2CbsN,KAAM,SAActC,EAAO1B,EAAIsC,GAI7B,OAHW5L,KAEN+Q,GAAG/F,EAAO1B,EAAIsC,EAAI,GAFZ5L,MAaboG,MAAO,SAAe4E,EAAOY,EAAI2F,GAI/B,IAHA,IACIP,EADOhR,KACO,MAAQgL,GAEjBlJ,EAAIkP,EAAOjP,OAAS,EAAGD,GAAK,EAAGA,IAEjCkP,EAAOlP,GAAG8J,IAAMoF,EAAOlP,GAAG8J,KAAOA,GAAgB,SAAVZ,IAC1C3D,WAAW,SAAUiC,GACnBA,EAAGkI,KAAKxR,KAAM4L,EAAI2F,IAClBlE,KARKrN,KAQMgR,EAAOlP,GAAGwH,IAAK,GAExB0H,EAAOlP,GAAGwL,MAVPtN,KAWAiR,IAAIjG,EAAOgG,EAAOlP,GAAGwH,GAAI0H,EAAOlP,GAAG8J,KAQ9C,OAnBW5L,KAiBNkM,WAAWlB,GAjBLhL,MA4BbkM,WAAY,SAAoBlB,GAG9B,GAFWhL,KAEFkJ,OAAOnH,OAAS,EAAG,CAC1B,IAAI0P,EAHKzR,KAGOkJ,OAAO,GAEnBuI,EAAKzG,QAAUA,IALVhL,KAMFkJ,OAAOwI,QANL1R,KAQFkM,cAIFlB,GACHyG,EAAKxG,SAIT,OAjBWjL,MAyBb8L,OAAQ,SAAgB1J,GACtB,IACIsG,EAAStG,EAAMqG,QAInB,IALWzI,KAKDgC,WAAaI,EAAME,QAAUF,EAAME,MAAMoL,SAAWtL,EAAME,MAAMqP,OAASvP,EAAME,MAAMT,YAAcO,EAAMyK,MAEjH,OADAxF,WANSrH,KAMO8L,OAAOuB,KANdrN,KAMyBoC,GAAQ,KANjCpC,KAWX,IAAIkI,KAAU9F,EAAM6F,QAXTjI,KAWuByI,QAAQC,GAAQ,IAUlD,GArBW1I,KAaNoG,MAAM,MAAOhE,EAAM2J,MAbb/L,KAgBDgC,WAAakG,GAhBZlI,KAiBJ0M,KAAKtK,EAAM2J,KAAK,GAAMtF,KAAKrE,EAAM2J,KAjB7B/L,KAqBFgC,WAAakG,EAAM,CArBjBlI,KAsBJoG,MAAM,OAAQhE,EAAM2J,KAEzB3J,EAAMkK,MAAQlK,EAAMwK,QAAU,EAC9BxK,EAAM6L,UAAY,EAClB7L,EAAM6K,WAAa7M,EAAOgB,IAAIS,YAC9B,IAAI2K,EAAyC,KAA9BpK,EAAMyK,MAAQzK,EAAMwK,QAAiBR,KAAKK,IAAIrK,EAAMmG,OA3B1DvI,KA4BJiJ,WAAW7G,EAAM2J,KAAO1E,WA5BpBrH,KA4BoC8L,OAAOuB,KA5B3CrN,KA4BsDoC,GAAQoK,GAwBzE,OApDWxM,KAgCFgC,YAAckG,IACrB9F,EAAM8E,SAAU,EAChB9E,EAAM0J,QAAS,EACf1J,EAAMkK,MAAQlK,EAAMwK,QAAU,EAC9BxK,EAAM6L,UAAY,EApCTjO,KAsCJuN,YAAYnL,EAAM2J,KAtCd/L,KAyCJoO,aAAahM,EAAME,OAGxBlC,EAAO2C,gBA5CE/C,KAgDDgC,WAAckG,GAhDblI,KAiDJ0M,KAAKtK,EAAM2J,KAAK,GAjDZ/L,MA4DbuN,YAAa,SAAqB3B,GAGhC,GAFW5L,KAEFiJ,WAAW2C,GAAK,CAEvB,GAAmC,mBAJ1B5L,KAIOiJ,WAAW2C,GACzBxE,aALOpH,KAKWiJ,WAAW2C,QACxB,CACL,IAAIxJ,EAPGpC,KAOUqC,WAAWuJ,GAExBxJ,GAASA,EAAME,OACjBF,EAAME,MAAM6D,oBAAoB,QAV3BnG,KAUyCiJ,WAAW2C,IAAK,UAVzD5L,KAcGiJ,WAAW2C,GAGzB,OAjBW5L,MAyBbqC,WAAY,SAAoBuJ,GAG9B,IAFA,IAES9J,EAAI,EAAGA,EAFL9B,KAEciH,QAAQlF,OAAQD,IACvC,GAAI8J,IAHK5L,KAGOiH,QAAQnF,GAAGiK,IACzB,OAJO/L,KAIKiH,QAAQnF,GAIxB,OAAO,MAOTkK,eAAgB,WACHhM,KAEN4R,SAGL,IAAK,IAAI9P,EAAI,EAAGA,EALL9B,KAKciH,QAAQlF,OAAQD,IACvC,GANS9B,KAMAiH,QAAQnF,GAAGgK,OAClB,OAPO9L,KAOKiH,QAAQnF,GAAG+P,QAK3B,OAAO,IAAIpG,EAZAzL,OAkBb4R,OAAQ,WACN,IACIE,EADO9R,KACMmI,MACb4J,EAAM,EACNjQ,EAAI,EAER,KALW9B,KAKFiH,QAAQlF,OAAS+P,GAA1B,CAKA,IAAKhQ,EAAI,EAAGA,EAVD9B,KAUUiH,QAAQlF,OAAQD,IAV1B9B,KAWAiH,QAAQnF,GAAGgK,QAClBiG,IAKJ,IAAKjQ,EAjBM9B,KAiBGiH,QAAQlF,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC7C,GAAIiQ,GAAOD,EACT,OAnBO9R,KAsBAiH,QAAQnF,GAAGgK,SAtBX9L,KAwBEgC,WAxBFhC,KAwBoBiH,QAAQnF,GAAGQ,OAxB/BtC,KAyBAiH,QAAQnF,GAAGQ,MAAM2D,WAAW,GAzB5BjG,KA6BFiH,QAAQ2J,OAAO9O,EAAG,GAEvBiQ,QAUN7P,aAAc,SAAsB0J,GAGlC,QAAkB,IAAPA,EAAoB,CAG7B,IAFA,IAAI3J,EAAM,GAEDH,EAAI,EAAGA,EALP9B,KAKgBiH,QAAQlF,OAAQD,IACvCG,EAAI8E,KANG/G,KAMOiH,QAAQnF,GAAGiK,KAG3B,OAAO9J,EAEP,MAAO,CAAC2J,IASZoB,eAAgB,SAAwB5K,GAsBtC,OAnBAA,EAAME,MAAM4K,aAAe9M,EAAOgB,IAAIqE,qBACtCrD,EAAME,MAAM4K,aAAaxH,OAASoL,EAHvB9Q,KAGkC2I,MAEzCvG,EAAM4P,QACR5P,EAAME,MAAM4K,aAAavH,QAAQvD,EAAM4P,SAEvC5P,EAAME,MAAM4K,aAAavH,QAAQvD,EAAME,OAIzCF,EAAME,MAAM4K,aAAahF,KAAO9F,EAAM6F,MAElC7F,EAAM6F,QACR7F,EAAME,MAAM4K,aAAagD,UAAY9N,EAAMwK,QAAU,EACrDxK,EAAME,MAAM4K,aAAaiD,QAAU/N,EAAMyK,OAAS,GAGpDzK,EAAME,MAAM4K,aAAaO,aAAa7L,eAAeQ,EAAMmG,MAAOnI,EAAOgB,IAAIS,aAnBlE7B,MA6BboO,aAAc,SAAsBtB,GAClC,IACImF,EAAQ7R,EAAOS,YAAcT,EAAOS,WAAWqR,OAAOvD,QAAQ,UAAY,EAE9E,GAAIvO,EAAO4E,gBAAkB8H,EAAKI,eAChCJ,EAAKI,aAAalH,QAAU,KAC5B8G,EAAKI,aAAajH,WAAW,GAEzBgM,GACF,IACEnF,EAAKI,aAAaxH,OAAStF,EAAO4E,eAClC,MAAO9B,IAKb,OADA4J,EAAKI,aAAe,KAdTlN,MAsBbuO,YAAa,SAAqBzB,GAClB,kBAAkBqF,KAAK/R,EAAOS,YAAcT,EAAOS,WAAW4C,aAG1EqJ,EAAKrF,IAAM,4FAajB,IAAIgE,EAAQ,SAAe2G,GACzBpS,KAAKqS,QAAUD,EACfpS,KAAKC,QAGPwL,EAAMvL,UAAY,CAKhBD,KAAM,WACJ,IACIqS,EADOtS,KACOqS,QAiBlB,OAlBWrS,KAGNU,OAAS4R,EAAO5R,OAHVV,KAINiI,MAAQqK,EAAOrK,MAJTjI,KAKNW,QAAU2R,EAAO3R,QALXX,KAMNuI,MAAQ+J,EAAO/J,MANTvI,KAONsM,MAAQ,EAPFtM,KAQNkH,SAAU,EARJlH,KASN8L,QAAS,EATH9L,KAUNyI,QAAU,YAVJzI,KAYN+L,MAAQ3L,EAAOC,SAEpBiS,EAAOrL,QAAQF,KAdJ/G,WAiBNuS,SAjBMvS,MAyBbuS,OAAQ,WACN,IACID,EADOtS,KACOqS,QACd9Q,EAASnB,EAAOM,QAFTV,KAEwBU,QAFxBV,KAEuCqS,QAAQ3R,OAAS,EAFxDV,KAEiEW,QAgC5E,OA9BI2R,EAAOtQ,WAJAhC,KAMJsC,WAAyC,IAA1BlC,EAAOgB,IAAIoR,WAA6BpS,EAAOgB,IAAIqR,iBAAmBrS,EAAOgB,IAAIoR,aAN5FxS,KAQJsC,MAAMX,KAAKC,eAAeL,EAAQnB,EAAOgB,IAAIS,aARzC7B,KAUJsC,MAAMoL,QAAS,EAVX1N,KAYJsC,MAAMqD,QAAQvF,EAAOY,aAChBZ,EAAOa,UAbRjB,KAeJsC,MAAQlC,EAAOkG,oBAfXtG,KAiBJ0Q,SAjBI1Q,KAiBY0S,eAAerF,KAjB3BrN,WAmBJsC,MAAM+D,iBAAiB,QAnBnBrG,KAmBiC0Q,UAAU,GAnB3C1Q,KAsBJ2Q,QAtBI3Q,KAsBW2S,cAActF,KAtBzBrN,WAwBJsC,MAAM+D,iBAAiBjG,EAAOQ,cAxB1BZ,KAwB8C2Q,SAAS,GAxBvD3Q,KA2BJsC,MAAMmF,IAAM6K,EAAO3J,KA3Bf3I,KA4BJsC,MAAMgG,QAAU,OA5BZtI,KA6BJsC,MAAMf,OAASA,EAASnB,EAAOmB,SA7B3BvB,KA+BJsC,MAAMgD,QA/BFtF,MAyCb6R,MAAO,WACL,IACIS,EADOtS,KACOqS,QAalB,OAdWrS,KAGNU,OAAS4R,EAAO5R,OAHVV,KAINiI,MAAQqK,EAAOrK,MAJTjI,KAKNW,QAAU2R,EAAO3R,QALXX,KAMNuI,MAAQ+J,EAAO/J,MANTvI,KAONsM,MAAQ,EAPFtM,KAQNiO,UAAY,EARNjO,KASNkH,SAAU,EATJlH,KAUN8L,QAAS,EAVH9L,KAWNyI,QAAU,YAXJzI,KAaN+L,MAAQ3L,EAAOC,SAbTL,MAoBb0S,eAAgB,WACH1S,KAENqS,QAAQjM,MAAM,YAFRpG,KAE0B+L,IAF1B/L,KAEoCsC,MAAMoF,MAF1C1H,KAEuDsC,MAAMoF,MAAMkL,KAAO,GAF1E5S,KAKNsC,MAAM6D,oBAAoB,QALpBnG,KAKkC0Q,UAAU,IAMzDiC,cAAe,WACb,IACIL,EADOtS,KACOqS,QAElBC,EAAOvJ,UAAYqD,KAAKyG,KAA2B,GAHxC7S,KAGuBsC,MAAMiK,UAAiB,GAEd,IAAvC6E,OAAOD,KAAKmB,EAAO7J,SAAS1G,SAC9BuQ,EAAO7J,QAAU,CACfqK,UAAW,CAAC,EAAsB,IAAnBR,EAAOvJ,aAIJ,WAAlBuJ,EAAOtJ,SACTsJ,EAAOtJ,OAAS,SAEhBsJ,EAAOlM,MAAM,QAEbkM,EAAOpG,cAhBElM,KAoBNsC,MAAM6D,oBAAoB/F,EAAOQ,cApB3BZ,KAoB+C2Q,SAAS,KAOvE,IAAIG,EAAQ,GAMRpF,EAAa,SAAoBvL,GACnC,IAAI+K,EAAM/K,EAAKwI,KAEf,GAAImI,EAAM5F,GAKR,OAHA/K,EAAK4I,UAAY+H,EAAM5F,GAAKqB,cAE5BwG,EAAU5S,GAIZ,GAAI,sBAAsBgS,KAAKjH,GAAM,CAKnC,IAHA,IAAI8H,EAAOC,KAAK/H,EAAIrH,MAAM,KAAK,IAC3BqP,EAAW,IAAIC,WAAWH,EAAKjR,QAE1BD,EAAI,EAAGA,EAAIkR,EAAKjR,SAAUD,EACjCoR,EAASpR,GAAKkR,EAAKI,WAAWtR,GAGhCuR,EAAgBH,EAASxN,OAAQvF,OAC5B,CAEL,IAAImT,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOtI,GAAK,GACrBoI,EAAIG,gBAAkBtT,EAAK0I,oBAC3ByK,EAAII,aAAe,cAEnBJ,EAAI5J,OAAS,WAEX,IAAIkJ,GAAQU,EAAIK,OAAS,IAAI,GAEhB,MAATf,GAAyB,MAATA,GAAyB,MAATA,EAMpCS,EAAgBC,EAAIM,SAAUzT,GAL5BA,EAAKiG,MAAM,YAAa,KAAM,0CAA4CkN,EAAIK,OAAS,MAQ3FL,EAAIO,QAAU,WAER1T,EAAK6B,YACP7B,EAAK4H,QAAS,EACd5H,EAAK6B,WAAY,EACjB7B,EAAK8G,QAAU,UACR6J,EAAM5F,GACb/K,EAAKmF,SAITwO,EAAYR,KASZQ,EAAc,SAAqBR,GACrC,IACEA,EAAIS,OACJ,MAAO7Q,GACPoQ,EAAIO,YAUJR,EAAkB,SAAyBW,EAAa7T,GAE1D,IAAIuH,EAAQ,WACVvH,EAAKiG,MAAM,YAAa,KAAM,gCAI5B6N,EAAU,SAAiBvO,GACzBA,GAAUvF,EAAK8G,QAAQlF,OAAS,GAClC+O,EAAM3Q,EAAKwI,MAAQjD,EACnBqN,EAAU5S,EAAMuF,IAEhBgC,KAKmB,oBAAZhB,SAAiE,IAAtCtG,EAAOgB,IAAIiS,gBAAgBtR,OAC/D3B,EAAOgB,IAAIiS,gBAAgBW,GAAarN,KAAKsN,GAAgB,MAAEvM,GAE/DtH,EAAOgB,IAAIiS,gBAAgBW,EAAaC,EAASvM,IAUjDqL,EAAY,SAAmB5S,EAAMuF,GAEnCA,IAAWvF,EAAK4I,YAClB5I,EAAK4I,UAAYrD,EAAO6G,UAIe,IAArC6E,OAAOD,KAAKhR,EAAKsI,SAAS1G,SAC5B5B,EAAKsI,QAAU,CACbqK,UAAW,CAAC,EAAoB,IAAjB3S,EAAK4I,aAKJ,WAAhB5I,EAAK6I,SACP7I,EAAK6I,OAAS,SAEd7I,EAAKiG,MAAM,QAEXjG,EAAK+L,eAQLxK,EAAoB,WAEtB,GAAKtB,EAAOc,cAAZ,CAKA,IAC8B,oBAAjBgT,aACT9T,EAAOgB,IAAM,IAAI8S,aACsB,oBAAvBC,mBAChB/T,EAAOgB,IAAM,IAAI+S,mBAEjB/T,EAAOc,eAAgB,EAEzB,MAAOgC,GACP9C,EAAOc,eAAgB,EAIpBd,EAAOgB,MACVhB,EAAOc,eAAgB,GAKzB,IAAIkT,EAAM,iBAAiBjC,KAAK/R,EAAOS,YAAcT,EAAOS,WAAWwT,UAEnEC,EAAalU,EAAOS,YAAcT,EAAOS,WAAWyT,WAAW5Q,MAAM,0BAErE6Q,EAAUD,EAAa1Q,SAAS0Q,EAAW,GAAI,IAAM,KAEzD,GAAIF,GAAOG,GAAWA,EAAU,EAAG,CACjC,IAAIC,EAAS,SAASrC,KAAK/R,EAAOS,YAAcT,EAAOS,WAAW4C,UAAU4H,gBAExEjL,EAAOS,YAAcT,EAAOS,WAAW4T,aAAeD,GAAUpU,EAAOS,aAAeT,EAAOS,WAAW4T,aAAeD,KACzHpU,EAAOc,eAAgB,GAKvBd,EAAOc,gBACTd,EAAOY,gBAA8C,IAA1BZ,EAAOgB,IAAIoR,WAA6BpS,EAAOgB,IAAIqR,iBAAmBrS,EAAOgB,IAAIoR,aAC5GpS,EAAOY,WAAWW,KAAKC,eAAexB,EAAOM,OAAS,EAAIN,EAAOO,QAASP,EAAOgB,IAAIS,aACrFzB,EAAOY,WAAW2E,QAAQvF,EAAOgB,IAAIwE,cAIvCxF,EAAOkB,gBAUN,KALU,EAAF,WACP,MAAO,CACLlB,OAAQA,EACRmH,KAAMA,IAET,QALM,OAKN,aAKDmN,EAAQtU,OAASA,EACjBsU,EAAQnN,KAAOA,EAIK,oBAAXzG,QACTA,OAAOf,aAAeA,EACtBe,OAAOV,OAASA,EAChBU,OAAOyG,KAAOA,EACdzG,OAAO2K,MAAQA,QACY,IAAXkJ,IAEhBA,EAAO5U,aAAeA,EACtB4U,EAAOvU,OAASA,EAChBuU,EAAOpN,KAAOA,EACdoN,EAAOlJ,MAAQA,GAv8EnB,GAu9EA,WACE,aA+HsB,IAAUmJ,EA7HhC7U,aAAaG,UAAU2U,KAAO,CAAC,EAAG,EAAG,GACrC9U,aAAaG,UAAU4U,aAAe,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAYvD/U,aAAaG,UAAU6U,OAAS,SAAUC,GAGxC,IAFWhV,KAEDoB,MAFCpB,KAEYoB,IAAI2M,SACzB,OAHS/N,KAOX,IAAK,IAAI8B,EAPE9B,KAOOS,OAAOsB,OAAS,EAAGD,GAAK,EAAGA,IAPlC9B,KAQJS,OAAOqB,GAAGiT,OAAOC,GAGxB,OAXWhV,MAuBbD,aAAaG,UAAU+U,IAAM,SAAUC,EAAGC,EAAGC,GAG3C,OAFWpV,KAEDoB,KAFCpB,KAEYoB,IAAI2M,UAK3BoH,EAAiB,iBAANA,EAPAnV,KAOsB6U,KAAK,GAAKM,EAC3CC,EAAiB,iBAANA,EARApV,KAQsB6U,KAAK,GAAKO,EAE1B,iBAANF,EAVAlV,KAqBG6U,MArBH7U,KAWJ6U,KAAO,CAACK,EAAGC,EAAGC,QAEwB,IAblCpV,KAaOoB,IAAI2M,SAASsH,WAbpBrV,KAcFoB,IAAI2M,SAASsH,UAAUC,gBAdrBtV,KAc0C6U,KAAK,GAAIzU,OAAOgB,IAAIS,YAAa,IAd3E7B,KAeFoB,IAAI2M,SAASwH,UAAUD,gBAfrBtV,KAe0C6U,KAAK,GAAIzU,OAAOgB,IAAIS,YAAa,IAf3E7B,KAgBFoB,IAAI2M,SAASyH,UAAUF,gBAhBrBtV,KAgB0C6U,KAAK,GAAIzU,OAAOgB,IAAIS,YAAa,KAhB3E7B,KAkBFoB,IAAI2M,SAAS0H,YAlBXzV,KAkB4B6U,KAAK,GAlBjC7U,KAkB0C6U,KAAK,GAlB/C7U,KAkBwD6U,KAAK,IAlB7D7U,aA0CbD,aAAaG,UAAUwV,YAAc,SAAUR,EAAGC,EAAGC,EAAGO,EAAKC,EAAKC,GAGhE,IAFW7V,KAEDoB,MAFCpB,KAEYoB,IAAI2M,SACzB,OAHS/N,KAOX,IAAI8V,EAPO9V,KAOG8U,aAOd,OANAK,EAAiB,iBAANA,EAAiBW,EAAG,GAAKX,EACpCC,EAAiB,iBAANA,EAAiBU,EAAG,GAAKV,EACpCO,EAAqB,iBAARA,EAAmBG,EAAG,GAAKH,EACxCC,EAAqB,iBAARA,EAAmBE,EAAG,GAAKF,EACxCC,EAAqB,iBAARA,EAAmBC,EAAG,GAAKD,EAEvB,iBAANX,EAcFY,GA5BE9V,KAeJ8U,aAAe,CAACI,EAAGC,EAAGC,EAAGO,EAAKC,EAAKC,QAEE,IAjBjC7V,KAiBOoB,IAAI2M,SAASgI,UAjBpB/V,KAkBFoB,IAAI2M,SAASgI,SAAST,gBAAgBJ,EAAG9U,OAAOgB,IAAIS,YAAa,IAlB/D7B,KAmBFoB,IAAI2M,SAASiI,SAASV,gBAAgBH,EAAG/U,OAAOgB,IAAIS,YAAa,IAnB/D7B,KAoBFoB,IAAI2M,SAASkI,SAASX,gBAAgBF,EAAGhV,OAAOgB,IAAIS,YAAa,IApB/D7B,KAqBFoB,IAAI2M,SAASmI,IAAIZ,gBAAgBK,EAAKvV,OAAOgB,IAAIS,YAAa,IArB5D7B,KAsBFoB,IAAI2M,SAASoI,IAAIb,gBAAgBM,EAAKxV,OAAOgB,IAAIS,YAAa,IAtB5D7B,KAuBFoB,IAAI2M,SAASqI,IAAId,gBAAgBO,EAAKzV,OAAOgB,IAAIS,YAAa,KAvB5D7B,KAyBFoB,IAAI2M,SAASsI,eAAenB,EAAGC,EAAGC,EAAGO,EAAKC,EAAKC,GAzB7C7V,OA4CbuH,KAAKrH,UAAUD,MAAiB2U,EA8B9BrN,KAAKrH,UAAUD,KA7BR,SAAUuH,GA2Bf,OA1BWxH,KAEN8U,aAAetN,EAAEkO,aAAe,CAAC,EAAG,EAAG,GAFjC1V,KAGNsW,QAAU9O,EAAEuN,QAAU,KAHhB/U,KAIN6U,KAAOrN,EAAEyN,KAAO,KAJVjV,KAKNuW,YAAc,CACjBC,oBAA4C,IAArBhP,EAAEgP,eAAiChP,EAAEgP,eAAiB,IAC7EC,oBAA4C,IAArBjP,EAAEiP,eAAiCjP,EAAEiP,eAAiB,IAC7EC,mBAA0C,IAApBlP,EAAEkP,cAAgClP,EAAEkP,cAAgB,EAC1EC,mBAA0C,IAApBnP,EAAEmP,cAAgCnP,EAAEmP,cAAgB,UAC1EC,iBAAsC,IAAlBpP,EAAEoP,YAA8BpP,EAAEoP,YAAc,IACpEC,kBAAwC,IAAnBrP,EAAEqP,aAA+BrP,EAAEqP,aAAe,OACvEC,iBAAsC,IAAlBtP,EAAEsP,YAA8BtP,EAAEsP,YAAc,EACpEC,mBAA0C,IAApBvP,EAAEuP,cAAgCvP,EAAEuP,cAAgB,GAbjE/W,KAgBNgX,UAAYxP,EAAEyP,SAAW,CAAC,CAC7B3N,GAAI9B,EAAEyP,WACH,GAlBMjX,KAmBNkX,OAAS1P,EAAE2P,MAAQ,CAAC,CACvB7N,GAAI9B,EAAE2P,QACH,GArBMnX,KAsBNoX,eAAiB5P,EAAE6P,cAAgB,CAAC,CACvC/N,GAAI9B,EAAE6P,gBACH,GAEEzC,EAAOpD,KAAKxR,KAAMwH,KAW7BD,KAAKrH,UAAU6U,OAAS,SAAUC,EAAKpJ,GACrC,IAAIzL,EAAOH,KAEX,IAAKG,EAAK6B,UACR,OAAO7B,EAIT,GAAoB,WAAhBA,EAAK6I,OAQP,OAPA7I,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,SACPC,OAAQ,WACN9K,EAAK4U,OAAOC,EAAKpJ,MAIdzL,EAIT,IAAImX,OAAsD,IAAlClX,OAAOgB,IAAImW,mBAAqC,UAAY,SAEpF,QAAkB,IAAP3L,EAAoB,CAE7B,GAAmB,iBAARoJ,EAIT,OAAO7U,EAAKmW,QAHZnW,EAAKmW,QAAUtB,EACf7U,EAAK0U,KAAO,CAACG,EAAK,EAAG,GASzB,IAFA,IAAI/S,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAAK,CAEnC,IAAIM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAEhC,GAAIM,EAAO,CACT,GAAmB,iBAAR4S,EA6BT,OAAO5S,EAAMkU,QA5BblU,EAAMkU,QAAUtB,EAChB5S,EAAMyS,KAAO,CAACG,EAAK,EAAG,GAElB5S,EAAME,QAERF,EAAMmU,YAAYM,aAAe,aAE5BzU,EAAM4P,SAAY5P,EAAM4P,QAAQgD,KACnCwC,EAAYpV,EAAOkV,GAGF,YAAfA,OACqC,IAA5BlV,EAAM4P,QAAQqD,WACvBjT,EAAM4P,QAAQqD,UAAUzT,eAAeoT,EAAK5U,OAAOgB,IAAIS,aAEvDO,EAAM4P,QAAQuD,UAAU3T,eAAe,EAAGxB,OAAOgB,IAAIS,aAErDO,EAAM4P,QAAQwD,UAAU5T,eAAe,EAAGxB,OAAOgB,IAAIS,cAErDO,EAAM4P,QAAQyD,YAAYT,EAAK,EAAG,GAGpC5S,EAAM4P,QAAQgD,IAAIpT,eAAeoT,EAAK5U,OAAOgB,IAAIS,cAIrD1B,EAAKiG,MAAM,SAAUhE,EAAM2J,MAOjC,OAAO5L,GAYToH,KAAKrH,UAAU+U,IAAM,SAAUC,EAAGC,EAAGC,EAAGxJ,GACtC,IAAIzL,EAAOH,KAEX,IAAKG,EAAK6B,UACR,OAAO7B,EAIT,GAAoB,WAAhBA,EAAK6I,OAQP,OAPA7I,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,MACPC,OAAQ,WACN9K,EAAK8U,IAAIC,EAAGC,EAAGC,EAAGxJ,MAIfzL,EAOT,GAHAgV,EAAiB,iBAANA,EAAiB,EAAIA,EAChCC,EAAiB,iBAANA,GAAkB,GAAMA,OAEjB,IAAPxJ,EAAoB,CAE7B,GAAiB,iBAANsJ,EAGT,OAAO/U,EAAK0U,KAFZ1U,EAAK0U,KAAO,CAACK,EAAGC,EAAGC,GASvB,IAFA,IAAInT,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAAK,CAEnC,IAAIM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAEhC,GAAIM,EAAO,CACT,GAAiB,iBAAN8S,EAsBT,OAAO9S,EAAMyS,KArBbzS,EAAMyS,KAAO,CAACK,EAAGC,EAAGC,GAEhBhT,EAAME,QAEHF,EAAM4P,UAAW5P,EAAM4P,QAAQgD,KAClCwC,EAAYpV,EAAO,gBAGkB,IAA5BA,EAAM4P,QAAQqD,WACvBjT,EAAM4P,QAAQqD,UAAUzT,eAAesT,EAAG9U,OAAOgB,IAAIS,aAErDO,EAAM4P,QAAQuD,UAAU3T,eAAeuT,EAAG/U,OAAOgB,IAAIS,aAErDO,EAAM4P,QAAQwD,UAAU5T,eAAewT,EAAGhV,OAAOgB,IAAIS,cAErDO,EAAM4P,QAAQyD,YAAYP,EAAGC,EAAGC,IAIpCjV,EAAKiG,MAAM,MAAOhE,EAAM2J,MAO9B,OAAO5L,GAcToH,KAAKrH,UAAUwV,YAAc,SAAUR,EAAGC,EAAGC,EAAGxJ,GAC9C,IAAIzL,EAAOH,KAEX,IAAKG,EAAK6B,UACR,OAAO7B,EAIT,GAAoB,WAAhBA,EAAK6I,OAQP,OAPA7I,EAAK+I,OAAOnC,KAAK,CACfiE,MAAO,cACPC,OAAQ,WACN9K,EAAKuV,YAAYR,EAAGC,EAAGC,EAAGxJ,MAIvBzL,EAOT,GAHAgV,EAAiB,iBAANA,EAAiBhV,EAAK2U,aAAa,GAAKK,EACnDC,EAAiB,iBAANA,EAAiBjV,EAAK2U,aAAa,GAAKM,OAEjC,IAAPxJ,EAAoB,CAE7B,GAAiB,iBAANsJ,EAGT,OAAO/U,EAAK2U,aAFZ3U,EAAK2U,aAAe,CAACI,EAAGC,EAAGC,GAS/B,IAFA,IAAInT,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAAK,CAEnC,IAAIM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAEhC,GAAIM,EAAO,CACT,GAAiB,iBAAN8S,EA2BT,OAAO9S,EAAM0S,aA1Bb1S,EAAM0S,aAAe,CAACI,EAAGC,EAAGC,GAExBhT,EAAME,QAEHF,EAAM4P,UAEJ5P,EAAMyS,OACTzS,EAAMyS,KAAO1U,EAAK0U,MAAQ,CAAC,EAAG,GAAI,KAGpC2C,EAAYpV,EAAO,iBAGqB,IAA/BA,EAAM4P,QAAQyF,cACvBrV,EAAM4P,QAAQyF,aAAa7V,eAAesT,EAAG9U,OAAOgB,IAAIS,aAExDO,EAAM4P,QAAQ0F,aAAa9V,eAAeuT,EAAG/U,OAAOgB,IAAIS,aAExDO,EAAM4P,QAAQ2F,aAAa/V,eAAewT,EAAGhV,OAAOgB,IAAIS,cAExDO,EAAM4P,QAAQqE,eAAenB,EAAGC,EAAGC,IAIvCjV,EAAKiG,MAAM,cAAehE,EAAM2J,MAOtC,OAAO5L,GAkCToH,KAAKrH,UAAU0X,WAAa,WAC1B,IAEIpQ,EAAGoE,EAAIxJ,EAFPjC,EAAOH,KACPyO,EAAOH,UAGX,IAAKnO,EAAK6B,UACR,OAAO7B,EAIT,GAAoB,IAAhBsO,EAAK1M,OAEP,OAAO5B,EAAKoW,YACP,GAAoB,IAAhB9H,EAAK1M,OAAc,CAC5B,GAAuB,iBAAZ0M,EAAK,GA+Bd,OADArM,EAAQjC,EAAKkC,WAAWuB,SAAS6K,EAAK,GAAI,MAC3BrM,EAAMmU,YAAcpW,EAAKoW,YA9BxC/O,EAAIiH,EAAK,QAES,IAAP7C,IACJpE,EAAEoQ,aACLpQ,EAAEoQ,WAAa,CACbpB,eAAgBhP,EAAEgP,eAClBC,eAAgBjP,EAAEiP,eAClBC,cAAelP,EAAEkP,cACjBC,cAAenP,EAAEmP,cACjBC,YAAapP,EAAEoP,YACfE,YAAatP,EAAEsP,YACfC,cAAevP,EAAEuP,cACjBF,aAAcrP,EAAEqP,eAIpB1W,EAAKoW,YAAc,CACjBC,oBAAuD,IAAhChP,EAAEoQ,WAAWpB,eAAiChP,EAAEoQ,WAAWpB,eAAiBrW,EAAK0X,gBACxGpB,oBAAuD,IAAhCjP,EAAEoQ,WAAWnB,eAAiCjP,EAAEoQ,WAAWnB,eAAiBtW,EAAK2X,gBACxGpB,mBAAqD,IAA/BlP,EAAEoQ,WAAWlB,cAAgClP,EAAEoQ,WAAWlB,cAAgBvW,EAAK4X,eACrGpB,mBAAqD,IAA/BnP,EAAEoQ,WAAWjB,cAAgCnP,EAAEoQ,WAAWjB,cAAgBxW,EAAK6X,eACrGpB,iBAAiD,IAA7BpP,EAAEoQ,WAAWhB,YAA8BpP,EAAEoQ,WAAWhB,YAAczW,EAAK8X,aAC/FnB,iBAAiD,IAA7BtP,EAAEoQ,WAAWd,YAA8BtP,EAAEoQ,WAAWd,YAAc3W,EAAK+X,aAC/FnB,mBAAqD,IAA/BvP,EAAEoQ,WAAWb,cAAgCvP,EAAEoQ,WAAWb,cAAgB5W,EAAKgY,eACrGtB,kBAAmD,IAA9BrP,EAAEoQ,WAAWf,aAA+BrP,EAAEoQ,WAAWf,aAAe1W,EAAKiY,qBAQ/E,IAAhB3J,EAAK1M,SACdyF,EAAIiH,EAAK,GACT7C,EAAKhI,SAAS6K,EAAK,GAAI,KAMzB,IAFA,IAAIxM,EAAM9B,EAAK+B,aAAa0J,GAEnB9J,EAAI,EAAGA,EAAIG,EAAIF,OAAQD,IAG9B,GAFAM,EAAQjC,EAAKkC,WAAWJ,EAAIH,IAEjB,CAET,IAAIuW,EAAKjW,EAAMmU,YACf8B,EAAK,CACH7B,oBAA4C,IAArBhP,EAAEgP,eAAiChP,EAAEgP,eAAiB6B,EAAG7B,eAChFC,oBAA4C,IAArBjP,EAAEiP,eAAiCjP,EAAEiP,eAAiB4B,EAAG5B,eAChFC,mBAA0C,IAApBlP,EAAEkP,cAAgClP,EAAEkP,cAAgB2B,EAAG3B,cAC7EC,mBAA0C,IAApBnP,EAAEmP,cAAgCnP,EAAEmP,cAAgB0B,EAAG1B,cAC7EC,iBAAsC,IAAlBpP,EAAEoP,YAA8BpP,EAAEoP,YAAcyB,EAAGzB,YACvEE,iBAAsC,IAAlBtP,EAAEsP,YAA8BtP,EAAEsP,YAAcuB,EAAGvB,YACvEC,mBAA0C,IAApBvP,EAAEuP,cAAgCvP,EAAEuP,cAAgBsB,EAAGtB,cAC7EF,kBAAwC,IAAnBrP,EAAEqP,aAA+BrP,EAAEqP,aAAewB,EAAGxB,cAG5E,IAAIyB,EAASlW,EAAM4P,QAEfsG,GACFA,EAAO9B,eAAiB6B,EAAG7B,eAC3B8B,EAAO7B,eAAiB4B,EAAG5B,eAC3B6B,EAAO5B,cAAgB2B,EAAG3B,cAC1B4B,EAAO3B,cAAgB0B,EAAG1B,cAC1B2B,EAAO1B,YAAcyB,EAAGzB,YACxB0B,EAAOxB,YAAcuB,EAAGvB,YACxBwB,EAAOvB,cAAgBsB,EAAGtB,cAC1BuB,EAAOzB,aAAewB,EAAGxB,eAGpBzU,EAAMyS,OACTzS,EAAMyS,KAAO1U,EAAK0U,MAAQ,CAAC,EAAG,GAAI,KAIpC2C,EAAYpV,EAAO,YAKzB,OAAOjC,GAaTsL,MAAMvL,UAAUD,KAAO,SAAU2U,GAC/B,OAAO,WACL,IACItC,EADOtS,KACOqS,QADPrS,KAGN8U,aAAexC,EAAOwC,aAHhB9U,KAINsW,QAAUhE,EAAOgE,QAJXtW,KAKN6U,KAAOvC,EAAOuC,KALR7U,KAMNuW,YAAcjE,EAAOiE,YAE1B3B,EAAOpD,KAAKxR,MARDA,KAWFsW,QACPhE,EAAOyC,OAZE/U,KAYUsW,SAZVtW,KAaK6U,MACdvC,EAAO2C,IAdEjV,KAcO6U,KAAK,GAdZ7U,KAcqB6U,KAAK,GAd1B7U,KAcmC6U,KAAK,GAdxC7U,KAciD+L,MAhBzC,CAmBrBN,MAAMvL,UAAUD,MAQlBwL,MAAMvL,UAAU2R,MAAQ,SAAU+C,GAChC,OAAO,WACL,IACItC,EADOtS,KACOqS,QAqBlB,OAtBWrS,KAGN8U,aAAexC,EAAOwC,aAHhB9U,KAINsW,QAAUhE,EAAOgE,QAJXtW,KAKN6U,KAAOvC,EAAOuC,KALR7U,KAMNuW,YAAcjE,EAAOiE,YANfvW,KAQFsW,QACPhE,EAAOyC,OATE/U,KASUsW,SATVtW,KAUK6U,KACdvC,EAAO2C,IAXEjV,KAWO6U,KAAK,GAXZ7U,KAWqB6U,KAAK,GAX1B7U,KAWmC6U,KAAK,GAXxC7U,KAWiD+L,KAXjD/L,KAYKgS,UAZLhS,KAcJgS,QAAQ/L,WAAW,GAdfjG,KAgBJgS,aAAUpJ,EAEf0J,EAAOtF,eAlBEhN,OAsBJ4U,EAAOpD,KAAKxR,OAxBC,CA0BtByL,MAAMvL,UAAU2R,OAYlB,IAAI2F,EAAc,SAAqBpV,EAAOmW,GAG/B,aAFbA,EAAOA,GAAQ,YAGbnW,EAAM4P,QAAU5R,OAAOgB,IAAIoX,eAC3BpW,EAAM4P,QAAQwE,eAAiBpU,EAAMmU,YAAYC,eACjDpU,EAAM4P,QAAQyE,eAAiBrU,EAAMmU,YAAYE,eACjDrU,EAAM4P,QAAQ0E,cAAgBtU,EAAMmU,YAAYG,cAChDtU,EAAM4P,QAAQ2E,cAAgBvU,EAAMmU,YAAYI,cAChDvU,EAAM4P,QAAQ4E,YAAcxU,EAAMmU,YAAYK,YAC9CxU,EAAM4P,QAAQ8E,YAAc1U,EAAMmU,YAAYO,YAC9C1U,EAAM4P,QAAQ+E,cAAgB3U,EAAMmU,YAAYQ,cAChD3U,EAAM4P,QAAQ6E,aAAezU,EAAMmU,YAAYM,kBAER,IAA5BzU,EAAM4P,QAAQqD,WACvBjT,EAAM4P,QAAQqD,UAAUzT,eAAeQ,EAAMyS,KAAK,GAAIzU,OAAOgB,IAAIS,aAEjEO,EAAM4P,QAAQuD,UAAU3T,eAAeQ,EAAMyS,KAAK,GAAIzU,OAAOgB,IAAIS,aAEjEO,EAAM4P,QAAQwD,UAAU5T,eAAeQ,EAAMyS,KAAK,GAAIzU,OAAOgB,IAAIS,cAEjEO,EAAM4P,QAAQyD,YAAYrT,EAAMyS,KAAK,GAAIzS,EAAMyS,KAAK,GAAIzS,EAAMyS,KAAK,SAG3B,IAA/BzS,EAAM4P,QAAQyF,cACvBrV,EAAM4P,QAAQyF,aAAa7V,eAAeQ,EAAM0S,aAAa,GAAI1U,OAAOgB,IAAIS,aAE5EO,EAAM4P,QAAQ0F,aAAa9V,eAAeQ,EAAM0S,aAAa,GAAI1U,OAAOgB,IAAIS,aAE5EO,EAAM4P,QAAQ2F,aAAa/V,eAAeQ,EAAM0S,aAAa,GAAI1U,OAAOgB,IAAIS,cAE5EO,EAAM4P,QAAQqE,eAAejU,EAAM0S,aAAa,GAAI1S,EAAM0S,aAAa,GAAI1S,EAAM0S,aAAa,MAGhG1S,EAAM4P,QAAU5R,OAAOgB,IAAImW,qBAE3BnV,EAAM4P,QAAQgD,IAAIpT,eAAeQ,EAAMkU,QAASlW,OAAOgB,IAAIS,cAG7DO,EAAM4P,QAAQrM,QAAQvD,EAAME,OAGvBF,EAAM8E,SACT9E,EAAMiQ,QAAQrE,MAAM5L,EAAM2J,KAAK,GAAMtF,KAAKrE,EAAM2J,KAAK,IAhpB3D,K,2CC1/EA,EAAQ,OAAR,CAA0B,QAAS,GAAG,SAAU9L,GAC9C,OAAO,SAAoB+S,EAAMyF,EAAY1W,GAC3C,OAAO9B,EAAKD,KAAMgT,EAAMyF,EAAY1W","file":"13-5b133efa48e6e79b99ec.js","sourcesContent":["require(\"core-js/modules/es6.typed.uint8-array\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.date.now\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.function.bind\");\n\nrequire(\"core-js/modules/es6.promise\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n/*!\n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function HowlerGlobal() {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function init() {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function volume(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function mute(muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function unload() {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function codecs(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function _setup() {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function _setupCodecs() {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function _unlockAudio() {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function unlock(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i = 0; i < self.html5PoolSize; i++) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function _obtainHtml5Audio() {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay[\"catch\"](function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function _releaseHtml5Audio(audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function _autoSuspend() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function () {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        });\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function _autoResume() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function Howl(o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function init(o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function load() {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function play(sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function setParams() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function playWebAudio() {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function playHtml5() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n\n                  self._loadQueue();\n                }\n              })[\"catch\"](function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function listener() {\n            // Begin playback.\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function pause(id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function action() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function stop(id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function action() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function mute(muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function action() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function volume() {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function action() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function fade(from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function action() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function _startFadeInterval(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Make sure the volume is in the right bounds.\n\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol); // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Change the volume.\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function _stopFade(id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function loop() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function rate() {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function action() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function seek() {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return self;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function action() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function seekAndEmit() {\n            self._emit('seek', id); // Restart the playback if the sound was playing.\n\n\n            if (playing) {\n              self.play(id, true);\n            }\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function emitSeek() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function playing(id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function duration(id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function state() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function unload() {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function on(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function off(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function once(event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function _emit(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function _loadQueue(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function _ended(sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function _clearTimer(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function _soundById(id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function _inactiveSound() {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function _drain() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function _getSoundIds(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function _refreshBuffer(sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function _cleanBuffer(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function _clearSound(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function Sound(howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function init() {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function create() {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function reset() {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function _errorListener() {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function _loadListener() {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function loadBuffer(self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function safeXhrSend(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function decodeAudioData(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function error() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function success(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success)[\"catch\"](error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function loadSound(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function setupAudioContext() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Define globally in case AMD is not available or unused.\n\n\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') {\n    // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.1.3\n *  howlerjs.com\n *\n *  (c) 2013-2019, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n\n(function () {\n  'use strict'; // Setup default properties.\n\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Loop through all Howls and update their stereo panning.\n\n\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n\n\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n\n\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n\n\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this; // Setup user-defined default properties.\n\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      }; // Setup event listeners.\n\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : []; // Complete initilization with howler.js core's init function.\n\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n\n\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function action() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\n\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    } // Change the streo panning of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.\n\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n\n\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change position when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function action() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    } // Change the spatial position of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n\n\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function action() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    } // Change the spatial orientation of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n\n\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // Determine the values based on arguments.\n\n\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0]; // Set the grou's panner attribute values.\n\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    } // Update the values of the specified sounds.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        }; // Update the panner values or create a new panner if none exists.\n\n        var panner = sound._panner;\n\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          } // Create a new panner node.\n\n\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Setup user-defined default properties.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.\n\n      _super.call(this); // If a stereo or position was specified, set it up.\n\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Reset all spatial plugin properties on this sound.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // If a stereo or position was specified, set it up.\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n\n        self._panner = undefined;\n\n        parent._refreshBuffer(self);\n      } // Complete resetting of the sound.\n\n\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n\n\n  var setupPanner = function setupPanner(sound, type) {\n    type = type || 'spatial'; // Create the new panner node.\n\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node); // Update the connections.\n\n\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n"],"sourceRoot":""}