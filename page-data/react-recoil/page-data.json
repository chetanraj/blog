{"componentChunkName":"component---src-templates-blog-template-js","path":"/react-recoil","result":{"data":{"markdownRemark":{"id":"07a7528a-5a76-5d73-be84-3a531d8b7790","html":"<blockquote>\n<p>Recoil works and thinks like React.</p>\n</blockquote>\n<h3>Definition</h3>\n<p>Recoil is an experimental state management system for React by Facebook. It offers several out of the box abilities which are difficult to achieve with React ⚛️ alone.</p>\n<p>Recoil lets you create a data-flow graph that flows from <strong>atoms</strong> through <strong>selectors</strong> and down into your React components.</p>\n<h3>What are Atoms ?</h3>\n<p>Atoms are units of state, which can be subscribed individually unlike many state management systems. When an atom is updated, each component which is subscribed to it is re-rendered with the updated value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> nameStateAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">\"nameStateAtom\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// an unique id</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default value</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Atoms always need a unique key, which is used for debugging, persistence and some APIs which let us see the map of all atoms.</p>\n<p>The <code class=\"language-text\">atom()</code> function takes an object as a parameter, that object contains a <code class=\"language-text\">key</code> which is a unique id. Make sure that you don't create two atoms with the same key.</p>\n<p>To read and write an atom from a component, use a hook called <code class=\"language-text\">useRecoilState</code>. It is the same as React's <code class=\"language-text\">useState</code> but the useRecoilState can be shared between components.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>nameStateAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"input\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter name\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"comment\"</span><span class=\"token operator\">></span>\n          The state is shared using <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://recoiljs.org/\"</span><span class=\"token operator\">></span>recoil<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>When we enter any value in the input box above, the value of the input in the <code class=\"language-text\">Input</code> component is shared with other components which are subscribed to this atom <code class=\"language-text\">nameStateAtom</code>.</p>\n<h3>Selectors</h3>\n<p>A <strong>selector</strong> is a pure function which accepts atom as an input. When an atom is updated which is subscribed by the selector, the selector function will be re-evaluated.  Components can also subscribe to selectors just like atoms, and will then be re-rendered when the selectors change.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> nameStateSelector <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">\"nameStateSelector\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// unique ID</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>nameStateAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Selectors also needs a unique key and a <code class=\"language-text\">getter</code> function, computed value can be accessed in the component.</p>\n<p>In the above snippet of code, the <code class=\"language-text\">nameStateSelector</code> has one dependency, that is <code class=\"language-text\">nameStateAtom</code>. When the <code class=\"language-text\">nameStateAtom</code> changes/updates the <code class=\"language-text\">nameStateSelector</code> executes the getter and computes the value.</p>\n<p>The Selectors can be reading the <code class=\"language-text\">useRecoilValue()</code>, which takes an atom or selector as an argument.</p>\n<h3>useRecoilValue(state)</h3>\n<p>This is one of the important hooks in the Recoil API. This hook will just subscribe the component to the given Recoil state, it is used to return the value of the given Recoil state.</p>\n<p>This is the recommended hook to use when a component intends to read the state.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>atom<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">,</span> useRecoilValue<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> nameStateAtom <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'nameStateAtom'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> nameStateSelector <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'nameStateSelector'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>nameStateAtom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">NameDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>nameStateAtom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> nameSelector <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>nameStateSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      Name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      Name <span class=\"token keyword\">from</span> selector<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>If the value has to be accessed directly in the component, then use atom inside the <code class=\"language-text\">useRecoilValue()</code>. If any computation is required for the value, then use the selector.</p>\n</blockquote>\n<h3>A sample project is available on <a target=\"_blank\" href=\"https://github.com/chetanraj/react-recoil-example/\">GitHub</a>.</h3>\n<h3>Talk about Recoil in React Europe</h3>\n<div align=\"center\">\n    <div class=\"mt-6\"></div>\n    <iframe  width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_ISAA_Jt9kI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    <div class=\"mb-6\"></div>\n</div>","frontmatter":{"date":"May 16, 2020","path":"/react-recoil","title":"💫 Understanding Recoil - The state management system for React.","description":"Recoil is an experimental state management system for React by Facebook","published":true,"hero_image":{"publicURL":"/static/6a644302834c690a20704b1da7be9d97/react-recoil.png"},"tags":["react","recoil"]},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"previous":null,"next":{"frontmatter":{"title":"📝 Nifty npm tips","path":"/nifty-npm-tips","tags":["tips","npm"],"published":false}}}}}