{"componentChunkName":"component---src-templates-blog-template-js","path":"/optional-chaining","result":{"data":{"markdownRemark":{"html":"<h2 id=\"Definition\" style=\"position:relative;\"><a href=\"#Definition\" aria-label=\"Definition permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>Definition</h2>\n<p>The optional chaining operator <code class=\"language-text\">?.</code> permits reading the value of a property located deep within a chain of connected objects.</p>\n<blockquote>\n<p>The optional chaining was introduced part of the ES2020 standard.</p>\n</blockquote>\n<h2 id=\"Why-to-use-\" style=\"position:relative;\"><a href=\"#Why-to-use-\" aria-label=\"Why to use  permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>Why to use ?</h2>\n<p>It changes the way we look or access the properties from the deep objects. The optional chaining makes your code look more cleaner üßº and crispy ü•î.</p>\n<p>Consider this piece of code, where the data object has a query and an answer to the query.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">const response = <span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"What is javascript ?\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"answer\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JavaScript is üíõ\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To access the <code class=\"language-text\">value</code>, you've to write a loooong conditional statement which is difficult to read and format also üò¢</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> theValue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">&amp;&amp;</span>\nresponse<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&amp;&amp;</span>\nresponse<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>answer <span class=\"token operator\">&amp;&amp;</span>\nresponse<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>answer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttheValue <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>answer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\ttheValue <span class=\"token operator\">=</span> <span class=\"token string\">'JavaScript is BAE üíõ‚ù§Ô∏è'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But with optional chaining, you can the access the <code class=\"language-text\">value</code> easily üòÉ and you don't have to worry about the null &#x26; undefined checks</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">response<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>answer<span class=\"token operator\">?.</span>value\n\n<span class=\"token comment\">// Output</span>\nJavaScript is üíõ</code></pre></div>\n<p>Wow, this code looks so clean üßº and crisp and if the <code class=\"language-text\">value</code> is not present, then we can assign a default value to it</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">response<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>answer<span class=\"token operator\">?.</span>key <span class=\"token operator\">||</span> <span class=\"token string\">'JavaScript is BAE üíõ‚ù§Ô∏è'</span>\n\n<span class=\"token comment\">// Output</span>\nJavaScript is <span class=\"token constant\">BAE</span> üíõ‚ù§Ô∏è</code></pre></div>\n<h2 id=\"Babel-Plugin\" style=\"position:relative;\"><a href=\"#Babel-Plugin\" aria-label=\"Babel Plugin permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>Babel Plugin</h2>\n<p>Babel <a href=\"https://babeljs.io/blog/2020/01/11/7.8.0\">7.8.0</a> supports the new <code class=\"language-text\">ECMAScript 2020</code> features by default, no need of enabling individual plugin for optional chaining (<code class=\"language-text\">?.</code>).</p>\n<p>If you are using the latest Babel version which is above or equal to 7.8.0, then it's an easy setup</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/cli @babel/core @babel/preset-env</code></pre></div>\n<p>then add the following block of code to the <code class=\"language-text\">.babelrc</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"@babel/preset-env\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The necessary babel modules and the preset configurations are done, now it's time to do the babel magic ‚ú®</p>\n<p>Run this command to transpile the code to the supported version everywhere, this command will work if you have installed the <code class=\"language-text\">babel</code> module globally</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">babel app.js --out-file script-transpiled.js</code></pre></div>\n<p>All the optional chaining code should be placed in <code class=\"language-text\">app.js</code> and then the above command should be executed, this will produce the transpiled code which will work in major browsers and in <code class=\"language-text\">node.js</code> also.</p>\n<h2 id=\"Types-of-optional-chaining-or-Things-you-can-achieve-from-optional-chaining\" style=\"position:relative;\"><a href=\"#Types-of-optional-chaining-or-Things-you-can-achieve-from-optional-chaining\" aria-label=\"Types of optional chaining or Things you can achieve from optional chaining permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>Types of optional chaining or Things you can achieve from optional chaining</h2>\n<h3>1. Optional chaining with function calls</h3>\n<p>Optional chaining can be used when you trying to call a method which may not exist. Using optional chaining with function calls causes the expression to automatically return undefined instead of throwing an exception.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// </span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">getDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: o.getDiff is not a function</span>\n\n<span class=\"token comment\">// </span>\n<span class=\"token keyword\">typeof</span> o<span class=\"token punctuation\">.</span>getDiff <span class=\"token operator\">!=</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">&amp;&amp;</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getDiff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// With the use of optional chaining</span>\no<span class=\"token punctuation\">.</span>getDiff<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<h3>2. Optional chaining with expression</h3>\n<p>Say the left operand is null or undefined, the expression after the optional chaining operator will be evaluated.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isTeenage <span class=\"token operator\">=</span> user<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isTeenage :: '</span><span class=\"token punctuation\">,</span> isTeenage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// Output</span>\n\nisTeenage <span class=\"token operator\">:</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span></code></pre></div>\n<p>The user was defined as null, While executing the line #3, the <code class=\"language-text\">isTeenage</code> didn't throw any error because if the left operand is null or undefined, the expression will not be evaluated.</p>\n<h2 id=\"3-Combining-with-the-nullish-coalescing-operator-which-is-another-ES2020-feature\" style=\"position:relative;\"><a href=\"#3-Combining-with-the-nullish-coalescing-operator-which-is-another-ES2020-feature\" aria-label=\"3 Combining with the nullish coalescing operator which is another ES2020 feature permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>3. Combining with the nullish coalescing operator [which is another <em>ES2020</em> feature]</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isTeenage <span class=\"token operator\">=</span> user<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string\">'not a teenager yet'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isTeenage :: '</span><span class=\"token punctuation\">,</span> isTeenage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// Output</span>\n\nisTeenage <span class=\"token operator\">:</span><span class=\"token operator\">:</span>  not a teenager yet</code></pre></div>\n<h2 id=\"Things-about-optional-chaining\" style=\"position:relative;\"><a href=\"#Things-about-optional-chaining\" aria-label=\"Things about optional chaining permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>Things about optional chaining</h2>\n<p>üöÄClean &#x26; Readable code</p>\n<p>üöÄDon't worry about <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, either on operands that is left or right</p>\n<p>üöÄ\nüöÄ\nüöÄ</p>\n<h2 id=\"Browser-Support\" style=\"position:relative;\"><a href=\"#Browser-Support\" aria-label=\"Browser Support permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>Browser Support</h2>\n<ul>\n<li>Chrome - 80</li>\n<li>Edge - 80</li>\n<li>Firefox - 74</li>\n<li>Internet Explorer - NO</li>\n<li>Opera - 67</li>\n<li>Node.js - 14.0.0</li>\n</ul>\n<h2 id=\"References\" style=\"position:relative;\"><a href=\"#References\" aria-label=\"References permalink\" class=\"anchor-class before\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"color\"><line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">MDN web docs</a></li>\n</ul>","frontmatter":{"date":"April 28, 2020","path":"/optional-chaining","title":"‚õì The optional chaining operator in JavaScript","description":"The optional chaining operator ?. permits reading the value of a property located deep within a chain of connected objects."},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{"previous":null,"next":{"frontmatter":{"title":"ü§î What is context path ?","path":"/context-path","published":true}}}}}