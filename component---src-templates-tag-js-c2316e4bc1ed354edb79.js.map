{"version":3,"sources":["webpack:///./src/components/post-link.js","webpack:///./src/templates/tag.js","webpack:///./src/components/seo.js"],"names":["PostLink","post","frontmatter","path","title","date","description","readingTime","fields","since","seconds","Math","floor","Date","interval","timeSince","className","to","role","aria-label","text","TagTemplate","data","tag","pageContext","allMdx","edges","totalCount","Posts","map","edge","key","node","id","pageQuery","SEO","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"gVAAA,qCAkDeA,IA/CE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAIzBA,EAFFC,YAAeC,EAFY,EAEZA,KAAMC,EAFM,EAENA,MAAOC,EAFD,EAECA,KAAMC,EAFP,EAEOA,YACxBC,EACRN,EADFO,OAAUD,YAaNE,EAVY,SAAAJ,GAChB,IAAIK,EAAUC,KAAKC,OAAO,IAAIC,KAASR,GAAQ,KAC3CS,EAAWH,KAAKC,MAAMF,EAAU,SAGpC,IADAI,EAAWH,KAAKC,MAAMF,EAAU,SAChB,EACd,OAAOI,EAIGC,CAAU,IAAIF,KAAKR,IAEjC,OACE,yBAAKW,UAAU,QACb,kBAAC,OAAD,CAAMA,UAAU,YAAYC,GAAId,GAC9B,yBAAKa,UAAU,6DACZZ,GAEH,yBAAKY,UAAU,iFACZV,GAEH,yBAAKU,UAAU,sDAAf,YACYX,EADZ,MACyB,8BAAM,0BAAMW,UAAU,OAAOE,KAAK,MAAMC,aAAW,aAA7C,KAAkEZ,EAAYa,MAAa,IACvHX,EAAQ,GACP,0BAAMO,UAAU,0BAAhB,KAEE,0BACEA,UAAU,2DADZ,QAOF,Q,kCC1CZ,0HAkCeK,UAzBK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACfC,EADuC,EAAlBC,YACrBD,IADuC,EAEfD,EAAKG,OAA3BC,EAFqC,EAErCA,MAAOC,EAF8B,EAE9BA,WAETC,EAAQF,EAAMG,KAAI,SAAAC,GAAI,OAC1B,kBAAC,IAAD,CAAUC,IAAKD,EAAKE,KAAKC,GAAIhC,KAAM6B,EAAKE,UAG1C,OACE,oCACE,kBAAC,IAAD,CAAQ5B,MAAOmB,IACf,kBAAC,IAAD,CAAKnB,MAAUmB,EAAL,WACV,yBAAKP,UAAU,2CACb,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,gFACZW,EADH,mBAC8B,8BAAOJ,IAErC,yBAAKP,UAAU,eAAeY,KAGlC,kBAAC,IAAD,QAOC,IAAMM,EAAS,c,mFCxBtB,SAASC,EAAT,GAAkD,IAAnC7B,EAAkC,EAAlCA,YAAa8B,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMjC,EAAS,EAATA,MAC9BkC,EADuC,OACvCA,KAcFC,EAAkBjC,GAAegC,EAAKE,aAAalC,YAEzD,OACE,kBAAC,IAAD,CACEmC,eAAgB,CACdL,QAEFhC,MAAOA,EACPsC,cAAa,QAAUJ,EAAKE,aAAapC,MACzCiC,KAAM,CACJ,CACEM,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASxC,GAEX,CACEyC,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASxC,GAEX,CACEuC,KAAK,sBACLC,QAASL,IAEXQ,OAAOV,KAKfF,EAAIa,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACN/B,YAAY,IAUC6B","file":"component---src-templates-tag-js-c2316e4bc1ed354edb79.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nconst PostLink = ({ post }) => {\n  const {\n    frontmatter: { path, title, date, description },\n    fields: { readingTime },\n  } = post;\n\n  const timeSince = date => {\n    var seconds = Math.floor((new Date() - date) / 1000);\n    var interval = Math.floor(seconds / 31536000);\n\n    interval = Math.floor(seconds / 86400);\n    if (interval >= 0) {\n      return interval;\n    }\n  };\n\n  const since = timeSince(new Date(date));\n\n  return (\n    <div className=\"post\">\n      <Link className=\"text-base\" to={path}>\n        <div className=\"text-2xl text-blog-primary transition-colors duration-500\">\n          {title}\n        </div>\n        <div className=\"text-blog-secondary text-base font-normal mt-3 transition-colors duration-500\">\n          {description}\n        </div>\n        <div className=\"text-blog-lightgray text-base font-light mt-3 mb-5\">\n          wrote on {date} &#183; <span><span className=\"mr-2\" role=\"img\" aria-label=\"hourglass\">‚è≥</span>{readingTime.text}</span>{' '}\n          {since < 35 ? (\n            <span className=\"hidden sm:inline-block\">\n              &#183;&nbsp;\n              <span\n                className=\"new not-italic bg-blog-header px-2 rounded inline-block\"\n              >\n                New\n              </span>\n            </span>\n          ) : (\n            ''\n          )}\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default PostLink;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\n//* Components\nimport Header from '../components/header';\nimport Footer from '../components/footer';\nimport SEO from '../components/seo';\nimport PostLink from '../components/post-link';\n\nconst TagTemplate = ({ data, pageContext }) => {\n  let { tag } = pageContext;\n  const { edges, totalCount } = data.allMdx;\n\n  const Posts = edges.map(edge => (\n    <PostLink key={edge.node.id} post={edge.node} />\n  ));\n\n  return (\n    <>\n      <Header title={tag} />\n      <SEO title={`${tag} posts`} />\n      <div className=\"blog-post-container relative mb-20 h-sc\">\n        <div className=\"blog-post-content text-blog-primary\">\n          <div className=\"text-2xl mt-3 font-boogaloo text-blog-primary transition-colors duration-500\">\n            {totalCount} Posts tagged - <span>{tag}</span>\n          </div>\n          <div className=\"posts mb-20\">{Posts}</div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default TagTemplate;\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMdx(\n      limit: 1000\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            title\n            description\n            published\n            tags\n          }\n          fields {\n            readingTime {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}